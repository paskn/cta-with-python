[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Text Analysis with Python",
    "section": "",
    "text": "Start here: Python Basics"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Code and other materials for 1MEWI3647V Computational text analysis: An Introduction to text as data (WiSe25-26)\nQuestions, comments, suggestions? -&gt; Open an issue https://github.com/paskn/cta-with-python/issues\nOr email: sergei.pashakhin@uni-siegen.de"
  },
  {
    "objectID": "basic-python.html",
    "href": "basic-python.html",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "",
    "text": "After completing this tutorial, you will be able to:\n\n‚úì Run Python code in Google Colab\n‚úì Read and understand Python code\n‚úì Work with strings for text analysis\n‚úì Use basic data structures (lists, dictionaries)\n‚úì Write simple functions and control flow\n‚úì Find help and documentation online\n‚úì Understand cloud vs.¬†local Python environments\n‚úì (Optional) Debug common errors"
  },
  {
    "objectID": "basic-python.html#learning-outcomes",
    "href": "basic-python.html#learning-outcomes",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "",
    "text": "After completing this tutorial, you will be able to:\n\n‚úì Run Python code in Google Colab\n‚úì Read and understand Python code\n‚úì Work with strings for text analysis\n‚úì Use basic data structures (lists, dictionaries)\n‚úì Write simple functions and control flow\n‚úì Find help and documentation online\n‚úì Understand cloud vs.¬†local Python environments\n‚úì (Optional) Debug common errors"
  },
  {
    "objectID": "basic-python.html#getting-started-with-google-colab",
    "href": "basic-python.html#getting-started-with-google-colab",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "1. Getting Started with Google Colab",
    "text": "1. Getting Started with Google Colab\n\nWhat is Google Colab?\nGoogle Colab (short for Colaboratory) is a free cloud service that lets you write and run Python code in your web browser. You don‚Äôt need to install anything on your computer - everything runs in the cloud. This makes it perfect for getting started with Python.\n\n\nAccessing Google Colab\n\nGo to https://colab.research.google.com\nSign in with your Google account\nClick on ‚ÄúNew Notebook‚Äù to create a new Python notebook\n\n\n\n\nCreating a new notebook\n\n\n\n\nUnderstanding the Colab Interface\nA Colab notebook consists of cells. There are two main types:\n\nCode cells: Where you write Python code\nText cells: Where you write notes and explanations (using Markdown)\n\n\n\n\nColab interface\n\n\n\n\nRunning Code\nTo run code in a cell:\n\nClick the Play button (‚ñ∂) on the left side of the cell, OR\nPress Shift + Enter on your keyboard\n\nThe output will appear below the cell.\n\n\n\nRunning a code cell\n\n\n\n\nSaving Your Work\nYour notebooks are automatically saved to your Google Drive in a folder called ‚ÄúColab Notebooks‚Äù. You can also:\n\nRename your notebook by clicking on the title at the top\nDownload your notebook (File ‚Üí Download ‚Üí Download .ipynb)\nShare it with others (Share button in top right)\n\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nYour Colab notebooks are saved to Google Drive, so they count toward your Drive storage quota. We‚Äôll discuss local alternatives later in this tutorial."
  },
  {
    "objectID": "basic-python.html#your-first-python-code",
    "href": "basic-python.html#your-first-python-code",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "2. Your First Python Code",
    "text": "2. Your First Python Code\nLet‚Äôs start by looking at some Python code. Don‚Äôt worry if you don‚Äôt understand it yet - that‚Äôs what we‚Äôre here to learn!\n\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!\n\n\n\nWhat Just Happened?\nLet‚Äôs break down this code:\n\nmessage = \"Hello, World!\" - This creates a variable named message and stores the text ‚ÄúHello, World!‚Äù in it\nprint(message) - This tells Python to display the contents of the message variable\n\nThink of a variable like a labeled box where you can store information. The = sign means ‚Äústore the value on the right into the variable on the left‚Äù.\n\n\nExercise 2.1\nCopy the following code into Google Colab and run it:\n\nmessage = \"Hello, World!\"\nprint(message)\n\nHello, World!\n\n\nNow modify it:\n\nChange \"Hello, World!\" to \"Python is fun!\" and run the code again\nChange the variable name from message to greeting (remember to change it in both places!)\nAdd another line: print(\"My first Python program\") and run the code\n\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nVariable names can contain letters, numbers, and underscores, but they must start with a letter or underscore. Use descriptive names that help you remember what the variable contains."
  },
  {
    "objectID": "basic-python.html#getting-help-and-finding-information",
    "href": "basic-python.html#getting-help-and-finding-information",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "3. Getting Help and Finding Information",
    "text": "3. Getting Help and Finding Information\nBefore we dive deeper into Python, let‚Äôs learn how to find help when you‚Äôre stuck. This is one of the most important skills for working with Python!\n\nUsing Python‚Äôs Built-in Help\nPython has a built-in help() function that shows you information about functions and objects.\n\nhelp(print)\n\nThis will display documentation about the print function, including how to use it.\n\n\n\nUsing the help() function\n\n\n\n\nUsing dir() to Explore\nThe dir() function shows you what methods and attributes are available for an object:\n\ntext = \"hello\"\ndir(text)\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n\n\nThis shows all the things you can do with a string. Methods that start with _ are internal - focus on the others like upper, lower, split, etc.\n\n\nReading Official Python Documentation\nThe official Python documentation is at https://docs.python.org. It‚Äôs comprehensive and well-organized.\nFor beginners, the Python Tutorial section is especially helpful: https://docs.python.org/3/tutorial/\n\n\n\nPython documentation\n\n\n\n\nSearching Online Effectively\nWhen you have a question or encounter an error:\n\nGoogle your question - Include ‚Äúpython‚Äù in your search\n\nGood: ‚Äúpython how to convert string to lowercase‚Äù\nBad: ‚Äúmake text smaller‚Äù\n\nStack Overflow - A Q&A site where programmers help each other\n\nLook for questions with many upvotes and accepted answers (green checkmark)\nRead the question to make sure it matches your problem\n\nRead the error message - Python error messages often tell you exactly what‚Äôs wrong\n\nWe‚Äôll cover this in detail in the optional debugging section\n\n\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nWhen searching for help, include the Python version you‚Äôre using. Google Colab typically uses Python 3, so add ‚Äúpython 3‚Äù to your searches.\n\n\n\n\nExercise 3.1\nIn Google Colab, try the following:\n\nRun help(len) - what does the len() function do?\nCreate a variable: word = \"Python\", then run dir(word)\nFind a method in the output that sounds interesting (like upper or lower)\nTry using it: word.upper() or word.lower()\nUse help(word.upper) to learn more about that method"
  },
  {
    "objectID": "basic-python.html#basic-data-types",
    "href": "basic-python.html#basic-data-types",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "4. Basic Data Types",
    "text": "4. Basic Data Types\nPython works with different types of data. Let‚Äôs explore the most important ones for text and data analysis.\n\nStrings\nStrings are text data - anything you can type. They‚Äôre enclosed in quotes (either \" or ').\n\nauthor = \"Virginia Woolf\"\ntitle = 'Mrs Dalloway'\nsentence = \"She said, 'I love Python!'\"\n\n\nString Operations\nConcatenation (joining strings):\n\nfirst_name = \"Ada\"\nlast_name = \"Lovelace\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n\nAda Lovelace\n\n\nGetting string length:\n\ntext = \"Hello\"\nlength = len(text)\nprint(length)\n\n5\n\n\n\ntext = \"Python\"\nprint(text[0])      # First character\nprint(text[1])      # Second character\nprint(text[-1])     # Last character\nprint(text[0:3])    # Characters 0, 1, 2 (not 3)\nprint(text[2:])     # From character 2 to the end\n\nP\ny\nn\nPyt\nthon\n\n\n\n\nString Methods\nStrings have many built-in methods (functions that belong to strings):\nChanging case:\n\ntext = \"Hello World\"\nprint(text.lower())\nprint(text.upper())\n\nhello world\nHELLO WORLD\n\n\n\nsentence = \"Python is great for text analysis\"\nwords = sentence.split()\nprint(words)\n\n['Python', 'is', 'great', 'for', 'text', 'analysis']\n\n\n\ntext = \"I like cats\"\nnew_text = text.replace(\"cats\", \"dogs\")\nprint(new_text)\n\nI like dogs\n\n\n\ntext = \"   hello   \"\nprint(text.strip())\n\nhello\n\n\n\nsentence = \"Python is amazing\"\nposition = sentence.find(\"is\")\nprint(position)\n\n7\n\n\n\ntext = \"how much wood would a woodchuck chuck\"\ncount = text.count(\"wood\")\nprint(count)\n\n2\n\n\n\n\nString Formatting with f-strings\nF-strings let you insert variable values into strings easily:\n\nname = \"Alice\"\nage = 25\nmessage = f\"My name is {name} and I am {age} years old\"\nprint(message)\n\nMy name is Alice and I am 25 years old\n\n\n\n\n\nExercise 4.1\nCopy this code into Colab:\n\nbook_title = \"pride and prejudice\"\nauthor = \"Jane Austen\"\n\nModify the code to:\n\nConvert book_title to title case using .title() and print it\nMake author all uppercase and print it\nCreate a sentence using an f-string: \"The book {book_title} was written by {author}\"\nUse .split() on book_title to separate it into words and print the result\nCount how many times the letter ‚Äúe‚Äù appears in book_title\n\n\n\nNumbers\nPython works with two main types of numbers:\nIntegers (whole numbers):\n\npages = 324\nchapters = 12\n\nFloats (decimal numbers):\n\nprice = 19.99\nrating = 4.5\n\n\nArithmetic Operations\n\n# Basic arithmetic\nprint(10 + 5)      # Addition: 15\nprint(10 - 5)      # Subtraction: 5\nprint(10 * 5)      # Multiplication: 50\nprint(10 / 5)      # Division: 2.0 (always returns float)\nprint(10 // 3)     # Integer division: 3 (rounds down)\nprint(10 % 3)      # Modulo (remainder): 1\nprint(10 ** 2)     # Exponentiation: 100\n\n15\n5\n50\n2.0\n3\n1\n100\n\n\n\n\nType Conversion\nSometimes you need to convert between strings and numbers:\n\n# String to number\ntext_number = \"42\"\nnumber = int(text_number)\nprint(number + 8)  # Output: 50\n\n# Number to string\nage = 25\nmessage = \"I am \" + str(age) + \" years old\"\nprint(message)\n\n50\nI am 25 years old\n\n\n\n\n\n\n\n\nWarning‚ö†Ô∏è Warning\n\n\n\nYou cannot directly concatenate strings and numbers. You‚Äôll get an error if you try \"Age: \" + 25. Convert the number to a string first: \"Age: \" + str(25), or use an f-string: f\"Age: {25}\".\n\n\n\n\n\nExercise 4.2\nCopy this code into Colab:\n\ntotal_words = 1000\npages = 5\n\nModify the code to:\n\nCalculate words per page by dividing total_words by pages and print it\nCreate a variable additional_pages = 3 and calculate the new total pages\nConvert the result to a string and create a message: \"The document has X pages\" (use f-string)\nCalculate how many pages you‚Äôd have if you doubled the current number\n\n\n\nBooleans\nBooleans represent True or False values. They‚Äôre essential for making decisions in code.\n\nis_published = True\nis_draft = False\n\n\nComparison Operators\nThese operators compare values and return True or False:\n\nx = 10\ny = 5\n\nprint(x &gt; y)       # Greater than: True\nprint(x &lt; y)       # Less than: False\nprint(x == y)      # Equal to: False\nprint(x != y)      # Not equal to: True\nprint(x &gt;= 10)     # Greater than or equal: True\nprint(x &lt;= 5)      # Less than or equal: False\n\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\n\n\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nUse == to compare values (equality test) and = to assign values to variables. This is a common source of confusion!\n\n\nYou can also compare strings:\n\nword1 = \"apple\"\nword2 = \"banana\"\nprint(word1 == word2)    # False\nprint(word1 &lt; word2)     # True (alphabetical order)\n\nFalse\nTrue\n\n\n\n\n\nExercise 4.3\nCopy this code into Colab:\n\nword_count = 150\nminimum_required = 100\n\nModify the code to:\n\nCheck if word_count is greater than minimum_required and print the result\nCheck if word_count equals 150 and print the result\nCheck if word_count is not equal to 200 and print the result\nChange word_count to 75 and run the comparisons again"
  },
  {
    "objectID": "basic-python.html#data-structures",
    "href": "basic-python.html#data-structures",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "5. Data Structures",
    "text": "5. Data Structures\nData structures let you organize and store multiple pieces of information together.\n\nLists\nLists are ordered collections of items. They‚Äôre perfect for storing sequences of data.\n\nauthors = [\"Virginia Woolf\", \"James Joyce\", \"Marcel Proust\"]\nword_counts = [150, 200, 175, 300]\nmixed_data = [\"Python\", 3, True, 19.99]\n\n\nAccessing List Items\nLists use zero-based indexing, just like strings:\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(fruits[0])      # First item: apple\nprint(fruits[1])      # Second item: banana\nprint(fruits[-1])     # Last item: date\nprint(fruits[-2])     # Second to last: cherry\n\napple\nbanana\ndate\ncherry\n\n\n\n\nSlicing Lists\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers[2:5])    # Items 2, 3, 4: [2, 3, 4]\nprint(numbers[:3])     # First 3 items: [0, 1, 2]\nprint(numbers[7:])     # From index 7 to end: [7, 8, 9]\nprint(numbers[::2])    # Every other item: [0, 2, 4, 6, 8]\n\n[2, 3, 4]\n[0, 1, 2]\n[7, 8, 9]\n[0, 2, 4, 6, 8]\n\n\n\n\nModifying Lists\nAdding items:\n\nbooks = [\"1984\", \"Brave New World\"]\nbooks.append(\"Fahrenheit 451\")\nprint(books)\n\n['1984', 'Brave New World', 'Fahrenheit 451']\n\n\n\nbooks = [\"1984\", \"Brave New World\", \"Fahrenheit 451\"]\nbooks.remove(\"Brave New World\")\nprint(books)\n\n['1984', 'Fahrenheit 451']\n\n\n\nbooks = [\"1984\", \"Brave New World\", \"Fahrenheit 451\"]\nlast_book = books.pop()\nprint(last_book)\nprint(books)\n\nFahrenheit 451\n['1984', 'Brave New World']\n\n\n\n\nList Methods\nGetting list length:\n\nwords = [\"the\", \"quick\", \"brown\", \"fox\"]\nprint(len(words))\n\n4\n\n\n\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\nnumbers.sort()\nprint(numbers)\n\n[1, 1, 2, 3, 4, 5, 6, 9]\n\n\n\nletters = [\"a\", \"b\", \"c\", \"d\"]\nletters.reverse()\nprint(letters)\n\n['d', 'c', 'b', 'a']\n\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"banana\" in fruits)\nprint(\"grape\" in fruits)\n\nTrue\nFalse\n\n\n\n\nLists of Strings (Text Analysis)\nLists are especially useful for working with text data:\n\nsentence = \"Python is great for text analysis\"\nwords = sentence.split()\nprint(words)\nprint(f\"Number of words: {len(words)}\")\nprint(f\"First word: {words[0]}\")\nprint(f\"Last word: {words[-1]}\")\n\n['Python', 'is', 'great', 'for', 'text', 'analysis']\nNumber of words: 6\nFirst word: Python\nLast word: analysis\n\n\n\n\n\nExercise 5.1\nCopy this code into Colab:\n\ntext = \"to be or not to be that is the question\"\nwords = text.split()\n\nModify the code to:\n\nPrint the length of the words list\nPrint the first word and the last word\nUse .append() to add the word ‚Äúindeed‚Äù to the end of the list\nUse .remove() to remove the first occurrence of ‚Äúto‚Äù\nSort the words alphabetically and print the result\n\n\n\nDictionaries\nDictionaries store data as key-value pairs. They‚Äôre like a real dictionary where you look up a word (key) to find its definition (value).\n\nbook = {\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"year\": 1949,\n    \"pages\": 328\n}\n\n\nAccessing Dictionary Values\nUse keys to access values:\n\nbook = {\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"year\": 1949\n}\n\nprint(book[\"title\"])\nprint(book[\"author\"])\n\n1984\nGeorge Orwell\n\n\n\n\nAdding or Modifying Entries\n\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\"}\n\n# Add a new entry\nbook[\"year\"] = 1949\nprint(book)\n\n# Modify an existing entry\nbook[\"year\"] = 1950\nprint(book)\n\n{'title': '1984', 'author': 'George Orwell', 'year': 1949}\n{'title': '1984', 'author': 'George Orwell', 'year': 1950}\n\n\n\n\nDictionary Methods\nGetting all keys:\n\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\", \"year\": 1949}\nprint(book.keys())\n\ndict_keys(['title', 'author', 'year'])\n\n\n\nprint(book.values())\n\ndict_values(['1984', 'George Orwell', 1949])\n\n\n\nprint(book.items())\n\ndict_items([('title', '1984'), ('author', 'George Orwell'), ('year', 1949)])\n\n\n\nprint(\"author\" in book)\nprint(\"publisher\" in book)\n\nTrue\nFalse\n\n\n\n\nDictionaries for Text Analysis\nDictionaries are useful for counting and organizing text data:\n\nword_frequencies = {\n    \"the\": 150,\n    \"and\": 89,\n    \"to\": 76,\n    \"of\": 72\n}\n\nprint(f\"The word 'the' appears {word_frequencies['the']} times\")\n\nThe word 'the' appears 150 times\n\n\n\n\n\nExercise 5.2\nCopy this code into Colab:\n\npoem = {\n    \"title\": \"The Road Not Taken\",\n    \"author\": \"Robert Frost\",\n    \"year\": 1916\n}\n\nModify the code to:\n\nPrint the poem‚Äôs title\nAdd a new key ‚Äúlines‚Äù with the value 20\nChange the year to 1915\nPrint all the keys in the dictionary\nPrint all the values in the dictionary\nCheck if ‚Äúpublisher‚Äù is a key in the dictionary and print the result"
  },
  {
    "objectID": "basic-python.html#control-flow",
    "href": "basic-python.html#control-flow",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "6. Control Flow",
    "text": "6. Control Flow\nControl flow lets you make decisions and repeat actions in your code.\n\nIf Statements\nIf statements let your code make decisions based on conditions.\n\nword_count = 150\nminimum = 100\n\nif word_count &gt;= minimum:\n    print(\"You have enough words!\")\n    print(\"Good job!\")\n\nYou have enough words!\nGood job!\n\n\nOutput (if word_count is 150):\nYou have enough words!\nGood job!\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nNotice the indentation (spaces at the start of lines). Python uses indentation to group code together. Everything indented under the if statement runs only if the condition is True.\n\n\n\nIf-Else\n\nword_count = 75\nminimum = 100\n\nif word_count &gt;= minimum:\n    print(\"You have enough words!\")\nelse:\n    print(\"You need more words\")\n    words_needed = minimum - word_count\n    print(f\"You need {words_needed} more words\")\n\nYou need more words\nYou need 25 more words\n\n\n\n\nIf-Elif-Else\nUse elif (else-if) for multiple conditions:\n\nscore = 85\n\nif score &gt;= 90:\n    grade = \"A\"\nelif score &gt;= 80:\n    grade = \"B\"\nelif score &gt;= 70:\n    grade = \"C\"\nelse:\n    grade = \"F\"\n\nprint(f\"Your grade is: {grade}\")\n\nYour grade is: B\n\n\n\n\n\nExercise 6.1\nCopy this code into Colab:\n\ntext = \"Python\"\n\nModify the code to:\n\nCheck if the length of text is greater than 5. If it is, print ‚ÄúLong word‚Äù, otherwise print ‚ÄúShort word‚Äù\nChange text to different words and test your code\nModify your code to handle three cases: length &gt; 8 (print ‚ÄúVery long‚Äù), length &gt; 5 (print ‚ÄúMedium‚Äù), otherwise (print ‚ÄúShort‚Äù)\n\n\n\nLoops\nLoops let you repeat actions multiple times.\n\nFor Loops\nFor loops iterate over sequences (lists, strings, etc.):\nLooping over a list:\n\nwords = [\"Python\", \"is\", \"great\"]\nfor word in words:\n    print(word)\n\nPython\nis\ngreat\n\n\n\ntext = \"Python\"\nfor letter in text:\n    print(letter)\n\nP\ny\nt\nh\no\nn\n\n\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n# From 1 to 5\nfor i in range(1, 6):\n    print(i)\n\n# From 0 to 10, counting by 2\nfor i in range(0, 11, 2):\n    print(i)\n\n1\n2\n3\n4\n5\n0\n2\n4\n6\n8\n10\n\n\nCombining loops and if statements:\n\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nfor word in words:\n    if len(word) &gt; 5:\n        print(f\"{word} is a long word\")\n\nbanana is a long word\ncherry is a long word\n\n\n\nword_counts = {\"the\": 150, \"and\": 89, \"to\": 76}\n\n# Loop over keys\nfor word in word_counts:\n    print(word)\n\n# Loop over keys and values\nfor word, count in word_counts.items():\n    print(f\"{word}: {count}\")\n\nthe\nand\nto\nthe: 150\nand: 89\nto: 76\n\n\n\n\nWhile Loops\nWhile loops repeat as long as a condition is True:\n\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count = count + 1\n\n0\n1\n2\n3\n4\n\n\n\n\n\nExercise 6.2\nCopy this code into Colab:\n\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\n\nModify the code to:\n\nUse a for loop to print each word in words\nUse a for loop with an if statement to print only words with more than 3 letters\nUse a for loop to count how many words start with the letter ‚Äút‚Äù (use .startswith(\"t\"))\nUse range() to print the first 5 numbers (0-4)\nChange the range to print numbers from 1 to 10"
  },
  {
    "objectID": "basic-python.html#functions",
    "href": "basic-python.html#functions",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "7. Functions",
    "text": "7. Functions\nFunctions are reusable blocks of code that perform specific tasks.\n\nLooking at Function Code First\n\ndef greet(name):\n    message = f\"Hello, {name}!\"\n    return message\n\nresult = greet(\"Alice\")\nprint(result)\n\nHello, Alice!\n\n\n\n\nWhat Are Functions?\nLet‚Äôs break down that code:\n\ndef greet(name): - This defines a function named greet that takes one parameter called name\nThe indented code is the function body - what the function does\nreturn message - This sends the result back to whoever called the function\ngreet(\"Alice\") - This calls (runs) the function with the argument \"Alice\"\n\nThink of functions like recipes: you define the recipe once, then you can follow it many times with different ingredients.\n\n\nBuilt-in Functions Review\nWe‚Äôve already been using Python‚Äôs built-in functions:\n\n# len() - get length\ntext = \"Python\"\nprint(len(text))  # 6\n\n# type() - check data type\nprint(type(42))        # &lt;class 'int'&gt;\nprint(type(\"hello\"))   # &lt;class 'str'&gt;\nprint(type([1, 2, 3])) # &lt;class 'list'&gt;\n\n# print() - display output\nprint(\"Hello, World!\")\n\n# input() - get user input (works in Colab!)\nname = input(\"What is your name? \")\nprint(f\"Hello, {name}\")\n\n\n\nCreating Custom Functions\nFunction without parameters:\n\ndef say_hello():\n    print(\"Hello, World!\")\n    \nsay_hello()\n\nHello, World!\n\n\n\ndef create_greeting(first_name, last_name):\n    full_name = f\"{first_name} {last_name}\"\n    greeting = f\"Welcome, {full_name}!\"\n    return greeting\n\nmessage = create_greeting(\"Ada\", \"Lovelace\")\nprint(message)\n\nWelcome, Ada Lovelace!\n\n\n\ndef greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\nprint(greet(\"Alice\"))\nprint(greet(\"Bob\", \"Hi\"))\n\nHello, Alice!\nHi, Bob!\n\n\n\ndef count_words(text):\n    words = text.split()\n    return len(words)\n\nsentence = \"Python is great for text analysis\"\nnum_words = count_words(sentence)\nprint(f\"The sentence has {num_words} words\")\n\nThe sentence has 6 words\n\n\n\ndef analyze_text(text):\n    num_chars = len(text)\n    num_words = len(text.split())\n    return num_chars, num_words\n\ntext = \"Hello, World!\"\nchars, words = analyze_text(text)\nprint(f\"Characters: {chars}, Words: {words}\")\n\nCharacters: 13, Words: 2\n\n\n\n\nExercise 7.1\nCopy this code into Colab:\n\ndef process_word(word):\n    return word.upper()\n\nresult = process_word(\"python\")\nprint(result)\n\nPYTHON\n\n\nModify the code to:\n\nChange the function to return word.lower() instead\nAdd a second parameter case_type and use an if statement to return either uppercase or lowercase based on the parameter\nCreate a new function count_letter(text, letter) that counts how many times a specific letter appears in text\nTest your function with different texts and letters"
  },
  {
    "objectID": "basic-python.html#working-with-files",
    "href": "basic-python.html#working-with-files",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "8. Working with Files",
    "text": "8. Working with Files\nWorking with files lets you read and write data stored on your computer (or in Colab‚Äôs temporary storage).\n\nReading Text Files\n\n# Open and read a file\nfile = open(\"sample.txt\", \"r\")\ncontent = file.read()\nprint(content)\nfile.close()\n\nThis is line 1\nThis is line 2\nThis is line 3\n\n\n\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nThe \"r\" means ‚Äúread mode‚Äù. Always close files when you‚Äôre done with file.close() to free up resources.\n\n\nBetter way: Using with statement (automatically closes the file):\n\nwith open(\"sample.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n# File is automatically closed here\n\nThis is line 1\nThis is line 2\nThis is line 3\n\n\n\nReading line by line:\n\nwith open(\"sample.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())  # strip() removes extra whitespace/newlines\n\nThis is line 1\nThis is line 2\nThis is line 3\n\n\nReading all lines into a list:\n\nwith open(\"sample.txt\", \"r\") as file:\n    lines = file.readlines()\n    print(f\"Number of lines: {len(lines)}\")\n    print(f\"First line: {lines[0].strip()}\")\n\nNumber of lines: 3\nFirst line: This is line 1\n\n\n\n\nWriting to Text Files\n\n# Writing to a file (creates new file or overwrites existing)\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"This is a new line.\\n\")\n\n\n\n\n\n\n\nWarning‚ö†Ô∏è Warning\n\n\n\nUsing \"w\" mode will overwrite the entire file if it exists. Use \"a\" (append mode) to add to the end of an existing file instead.\n\n\nAppending to a file:\n\nwith open(\"output.txt\", \"a\") as file:\n    file.write(\"This line is added to the end.\\n\")\n\nWriting multiple lines:\n\nlines = [\"First line\\n\", \"Second line\\n\", \"Third line\\n\"]\nwith open(\"output.txt\", \"w\") as file:\n    file.writelines(lines)\n\n\n\nFile Paths in Google Colab\nIn Google Colab, you can:\n\nUpload files using the file browser on the left (folder icon)\nCreate files in code cells\nMount Google Drive to access your Drive files\n\n\n\n\nUploading files in Colab. (1) Press ‚Äúfolder‚Äù icon. (2) The upload button.\n\n\nCreating a sample file in Colab:\n\n# Create a sample file to practice with\nwith open(\"sample.txt\", \"w\") as file:\n    file.write(\"This is line 1\\n\")\n    file.write(\"This is line 2\\n\")\n    file.write(\"This is line 3\\n\")\n\n# Now read it back\nwith open(\"sample.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n\nThis is line 1\nThis is line 2\nThis is line 3\n\n\n\n\n\nText Analysis Example\n\n# Count word frequencies in a file\nword_counts = {}\n\nwith open(\"sample.txt\", \"r\") as file:\n    for line in file:\n        words = line.lower().split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n\nprint(word_counts)\n\n{'this': 3, 'is': 3, 'line': 3, '1': 1, '2': 1, '3': 1}\n\n\n\n\nExercise 8.1\nCopy this code into Colab to create a sample file:\n\nwith open(\"poem.txt\", \"w\") as file:\n    file.write(\"Roses are red\\n\")\n    file.write(\"Violets are blue\\n\")\n    file.write(\"Python is fun\\n\")\n    file.write(\"And so are you\\n\")\n\nNow modify the code to:\n\nRead the file and print its contents\nRead the file and print only the first two lines\nRead the file and count the total number of words across all lines\nRead the file and create a list of all words (split each line and combine)\nWrite a new file called ‚Äúoutput.txt‚Äù with all the words in uppercase"
  },
  {
    "objectID": "basic-python.html#introduction-to-packages",
    "href": "basic-python.html#introduction-to-packages",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "9. Introduction to Packages",
    "text": "9. Introduction to Packages\nSo far, we‚Äôve used Python‚Äôs built-in features. But Python‚Äôs real power comes from packages (also called libraries) - collections of pre-written code that add new capabilities.\n\nWhat Are Packages?\nPackages are like toolboxes. Each package contains functions and tools for specific tasks:\n\npandas - working with tabular data (like spreadsheets)\nnumpy - numerical computing and arrays\nmatplotlib - creating visualizations and charts\nnltk - natural language processing and text analysis\nscikit-learn - machine learning\n\n\n\nImporting Packages\nTo use a package, you import it:\n\nimport math\n\n# Now you can use functions from the math package\nresult = math.sqrt(16)\nprint(result)\n\n4.0\n\n\n\nimport math as m\n\nresult = m.sqrt(25)\nprint(result)\n\n5.0\n\n\n\nfrom math import sqrt, pi\n\nprint(sqrt(9))\nprint(pi)\n\n3.0\n3.141592653589793\n\n\n\n\nInstalling Packages in Colab\nMost common packages are already installed in Google Colab. If you need to install a package, use:\n!pip install package-name\nThe ! tells Colab to run this as a shell command, not Python code.\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nIn Colab, you usually don‚Äôt need to install packages. Just import them! We‚Äôll discuss installing packages locally in the next section.\n\n\n\n\nExample: Reading CSV with Pandas\nLet‚Äôs see a quick example using pandas to work with tabular data:\n\nimport pandas as pd\n\n# Create a sample dataset\ndata = {\n    \"book\": [\"1984\", \"Brave New World\", \"Fahrenheit 451\"],\n    \"author\": [\"George Orwell\", \"Aldous Huxley\", \"Ray Bradbury\"],\n    \"year\": [1949, 1932, 1953],\n    \"pages\": [328, 311, 249]\n}\n\n# Create a DataFrame (pandas' table structure)\ndf = pd.DataFrame(data)\n\n# Display the data\nprint(df)\n\n              book         author  year  pages\n0             1984  George Orwell  1949    328\n1  Brave New World  Aldous Huxley  1932    311\n2   Fahrenheit 451   Ray Bradbury  1953    249\n\n\n\nprint(df[\"book\"])\nprint(df[\"year\"])\n\n0               1984\n1    Brave New World\n2     Fahrenheit 451\nName: book, dtype: object\n0    1949\n1    1932\n2    1953\nName: year, dtype: int64\n\n\nFiltering data:\n\n# Books published after 1940\nrecent_books = df[df[\"year\"] &gt; 1940]\nprint(recent_books)\n\n             book         author  year  pages\n0            1984  George Orwell  1949    328\n2  Fahrenheit 451   Ray Bradbury  1953    249\n\n\nBasic statistics:\n\nprint(f\"Average pages: {df['pages'].mean()}\")\nprint(f\"Earliest year: {df['year'].min()}\")\n\nAverage pages: 296.0\nEarliest year: 1932\n\n\nReading from a CSV file:\n\n# Create a sample CSV file first\nwith open(\"books.csv\", \"w\") as file:\n    file.write(\"book,author,year,pages\\n\")\n    file.write(\"1984,George Orwell,1949,328\\n\")\n    file.write(\"Brave New World,Aldous Huxley,1932,311\\n\")\n\n# Read it with pandas\ndf = pd.read_csv(\"books.csv\")\nprint(df)\n\n              book         author  year  pages\n0             1984  George Orwell  1949    328\n1  Brave New World  Aldous Huxley  1932    311\n\n\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nPandas is incredibly powerful for data analysis. We‚Äôll explore it more deeply when working with real datasets. For now, just know that it exists and can read CSV files easily!\n\n\n\n\nExercise 9.1\nCopy this code into Colab:\n\nimport pandas as pd\n\ndata = {\n    \"word\": [\"the\", \"and\", \"to\", \"of\"],\n    \"count\": [150, 89, 76, 72]\n}\n\ndf = pd.DataFrame(data)\n\nModify the code to:\n\nPrint the entire DataFrame\nPrint only the ‚Äúword‚Äù column\nPrint only the ‚Äúcount‚Äù column\nFind the maximum count using df[\"count\"].max()\nFind the minimum count using df[\"count\"].min()"
  },
  {
    "objectID": "basic-python.html#local-python-environments",
    "href": "basic-python.html#local-python-environments",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "10. Local Python Environments",
    "text": "10. Local Python Environments\nSo far, we‚Äôve been using Google Colab, which runs Python in the cloud. But you might want to run Python on your own computer. Let‚Äôs explore why and how.\n\nCloud vs.¬†Local Development\nGoogle Colab (Cloud):\n\n‚úì No installation needed\n‚úì Works on any computer with a browser\n‚úì Free access to computing resources\n‚úó Requires internet connection\n‚úó Sessions timeout after inactivity\n‚úó Uses your Google Drive storage\n‚úó Some packages may not work\n\nLocal Python (Your Computer):\n\n‚úì Works offline\n‚úì Full control over environment\n‚úì No session timeouts\n‚úì All packages available\n‚úó Requires installation and setup\n‚úó Uses your computer‚Äôs resources\n\n\n\n\n\n\n\nNoteüìå Key Point\n\n\n\nFor learning and quick experiments, Colab is perfect. For larger projects or when you need specific packages, local Python is better.\n\n\n\n\nIntroduction to uv (Recommended)\nuv is a modern, fast Python package and project manager. We recommend it because it‚Äôs:\n\nVery fast (much faster than traditional tools)\nEasy to use\nHandles both Python installation and package management\nBecoming the industry standard\n\nLear more about uv here: https://docs.astral.sh/uv/\n\nInstalling uv\nOn macOS and Linux:\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nOn Windows:\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nAfter installation, close and reopen your terminal.\n\n\nUsing uv\nCreate a new Python project:\nuv init my-project\ncd my-project\nThis creates a new directory with a basic Python project structure.\nInstall a package:\nuv add pandas\nThis installs pandas and adds it to your project‚Äôs dependencies.\nRun Python:\nuv run python\nThis starts a Python interpreter with your project‚Äôs packages available.\nRun a Python script:\nuv run python my_script.py\nInstall a specific Python version:\nuv python install 3.11\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nuv automatically creates isolated environments for each project, so different projects can use different package versions without conflicts.\n\n\n\n\n\nIntroduction to Conda (Fallback Option)\nConda is a more established tool that also manages Python environments and packages. It‚Äôs widely used in data science.\n\nInstalling Conda\nDownload and install Miniconda (a minimal conda installation) from: https://docs.conda.io/en/latest/miniconda.html\nChoose the installer for your operating system and follow the installation instructions.\n\n\n\nMiniconda download page. At the bottom of https://www.anaconda.com/download\n\n\n\n\n\nMiniconda download page. Then choose ‚ÄúMiniconda Installers‚Äù\n\n\n\n\nUsing Conda\nCreate a new environment:\nconda create -n my-env python=3.11\nThis creates a new environment named ‚Äúmy-env‚Äù with Python 3.11.\nActivate the environment:\nconda activate my-env\nInstall packages:\nconda install pandas\nDeactivate the environment:\nconda deactivate\nList all environments:\nconda env list\nRemove an environment:\nconda remove -n my-env --all\n\n\n\nUsing Jupyter Locally\nOnce you have Python installed locally (with either uv or conda), you can run Jupyter notebooks on your computer.\nWith uv:\nuv add jupyter\nuv run jupyter notebook\nWith conda:\nconda install jupyter\njupyter notebook\nThis opens Jupyter in your web browser, running locally on your computer.\n\n\n\nJupyter running locally\n\n\n\n\n\nJupyter running locally. A new notebook\n\n\n\n\n\nJupyter running locally. Always have a Python kernel selected.\n\n\n\n\n\nJupyter running locally. Some useful UI elements.\n\n\n\n\nWhen to Use Which Tool\nUse uv when:\n\nStarting a new project\nYou want the fastest tool\nYou‚Äôre working on modern Python projects\nYou want the latest features\n\nUse conda when:\n\nWorking with data science packages (it handles dependencies well)\nYou need packages that aren‚Äôt on PyPI (Python Package Index)\nYou‚Äôre following tutorials that use conda\nYou need packages that require complex non-Python dependencies\n\nUse Colab when:\n\nLearning and experimenting\nYou don‚Äôt have Python installed locally\nYou need quick access from any computer\nYou‚Äôre sharing code with others who may not have Python\n\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nMany people use multiple tools: Colab for quick experiments and learning, uv for new projects, and conda for data science work. You don‚Äôt have to choose just one!\n\n\n\n\nExercise 10.1\nThis exercise requires setting up on your local computer (optional):\n\nInstall uv following the instructions for your operating system\nCreate a new project called ‚Äúpython-practice‚Äù\nAdd the pandas package to your project\nCreate a file called test.py with this code:\n\nimport pandas as pd\nprint(\"Pandas version:\", pd.__version__)\n\nPandas version: 2.3.3\n\n\nRun the file using uv run python test.py\n\nAlternative exercise with conda:\n\nInstall Miniconda following the instructions for your operating system\nCreate a new environment called ‚Äútest-env‚Äù with Python 3.11\nActivate the environment\nInstall pandas\nRun Python and import pandas to verify it works"
  },
  {
    "objectID": "basic-python.html#conclusion",
    "href": "basic-python.html#conclusion",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "11. Conclusion",
    "text": "11. Conclusion\nCongratulations! You‚Äôve completed this introduction to Python for text and data analysis.\n\nWhat You‚Äôve Learned\nYou can now:\n\n‚úì Run Python code in Google Colab\n‚úì Read and understand Python code by recognizing variables, data types, functions, and control flow\n‚úì Work with strings using methods like .lower(), .split(), .replace(), and string formatting\n‚úì Use data structures (lists and dictionaries) to organize data\n‚úì Control program flow with if statements and loops\n‚úì Create functions to organize reusable code\n‚úì Read and write files for data persistence\n‚úì Use packages like pandas for data analysis\n‚úì Find help using help(), documentation, and online resources\n‚úì Understand the difference between cloud (Colab) and local Python environments\n‚úì Set up local Python using uv or conda (optional)\n\n\n\nNext Steps\n\nPractice regularly - The best way to learn programming is by doing. Try writing small programs to solve problems you encounter.\nWork with real data - Apply these skills to actual text or datasets that interest you.\nLearn more packages - Explore packages like:\n\nnltk or spaCy for natural language processing\nmatplotlib or seaborn for data visualization\nnumpy for numerical computing\nscikit-learn for machine learning\n\nRead other people‚Äôs code - Since you‚Äôre learning to read code, study examples from tutorials and open-source projects.\nDebug and experiment - Don‚Äôt be afraid of errors! They‚Äôre a natural part of programming. See the optional debugging section for help.\nJoin communities - Consider joining Python forums, Reddit‚Äôs r/learnpython, or Stack Overflow to ask questions and learn from others.\n\n\n\nResources for Continued Learning\n\nOfficial Python Tutorial: https://docs.python.org/3/tutorial/\nPython for Data Analysis by Wes McKinney (pandas creator)\nReal Python: https://realpython.com - excellent tutorials\nAutomate the Boring Stuff with Python: Free online book at https://automatetheboringstuff.com\n\n\n\nKeep Learning!\nRemember: everyone who programs started as a beginner. The key is persistence and practice. You‚Äôve taken the first important steps, and you have all the foundational knowledge you need to continue learning.\nGood luck with your Python journey!"
  },
  {
    "objectID": "basic-python.html#appendix-a-debugging-and-error-messages-optional",
    "href": "basic-python.html#appendix-a-debugging-and-error-messages-optional",
    "title": "Introduction to Python for Text and Data Analysis",
    "section": "Appendix A: Debugging and Error Messages (Optional)",
    "text": "Appendix A: Debugging and Error Messages (Optional)\nThis section is optional but important. Understanding errors will help you fix problems faster and become more independent in your learning.\n\nWhy Errors Are Helpful\nErrors are not failures - they‚Äôre feedback! Python is telling you exactly what went wrong. Learning to read error messages is a crucial skill.\n\n\nCommon Error Types\n\nSyntaxError\nWhat it means: You wrote code that doesn‚Äôt follow Python‚Äôs grammar rules.\n\nprint(\"Hello\"\n\n\n  Cell In[85], line 1\n    print(\"Hello\"\n                 ^\n_IncompleteInputError: incomplete input\n\n\n\n\nError:\nSyntaxError: unexpected EOF while parsing\nWhat went wrong: Missing closing parenthesis.\nHow to fix: Add the closing ):\n\nprint(\"Hello\")\n\nHello\n\n\nAnother example:\n\nif x &gt; 5\n    print(\"Big\")\n\n\n  Cell In[87], line 1\n    if x &gt; 5\n            ^\nSyntaxError: expected ':'\n\n\n\n\nError:\nSyntaxError: invalid syntax\nWhat went wrong: Missing colon after if statement.\nHow to fix:\n\nif x &gt; 5:\n    print(\"Big\")\n\nBig\n\n\n\n\nNameError\nWhat it means: You‚Äôre trying to use a variable or function that doesn‚Äôt exist.\n\nprint(message)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[90], line 1\n----&gt; 1 print(message)\n\nNameError: name 'message' is not defined\n\n\n\nError:\nNameError: name 'message' is not defined\nWhat went wrong: The variable message was never created.\nHow to fix: Define the variable first:\n\nmessage = \"Hello\"\nprint(message)\n\nHello\n\n\nCommon cause: Typos in variable names\n\nmy_name = \"Alice\"\nprint(my_nane)  # Typo: 'nane' instead of 'name'\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[92], line 2\n      1 my_name = \"Alice\"\n----&gt; 2 print(my_nane)  # Typo: 'nane' instead of 'name'\n\nNameError: name 'my_nane' is not defined\n\n\n\n\n\nTypeError\nWhat it means: You‚Äôre using a value in a way that doesn‚Äôt work with its type.\n\nage = 25\nmessage = \"I am \" + age\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[93], line 2\n      1 age = 25\n----&gt; 2 message = \"I am \" + age\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\nError:\nTypeError: can only concatenate str (not \"int\") to str\nWhat went wrong: Can‚Äôt directly add a string and a number.\nHow to fix: Convert the number to a string:\n\nage = 25\nmessage = \"I am \" + str(age)\n# OR use an f-string:\nmessage = f\"I am {age}\"\n\nAnother example:\n\ntext = \"Python\"\nprint(text[0:3])\ntext[0] = \"p\"  # Trying to change a character\n\nPyt\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[96], line 3\n      1 text = \"Python\"\n      2 print(text[0:3])\n----&gt; 3 text[0] = \"p\"  # Trying to change a character\n\nTypeError: 'str' object does not support item assignment\n\n\n\nError:\nTypeError: 'str' object does not support item assignment\nWhat went wrong: Strings are immutable (can‚Äôt be changed).\nHow to fix: Create a new string:\n\ntext = \"Python\"\ntext = \"p\" + text[1:]\n\n\n\nIndexError\nWhat it means: You‚Äôre trying to access a list/string position that doesn‚Äôt exist.\n\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[5])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[98], line 2\n      1 words = [\"apple\", \"banana\", \"cherry\"]\n----&gt; 2 print(words[5])\n\nIndexError: list index out of range\n\n\n\nError:\nIndexError: list index out of range\nWhat went wrong: The list only has indices 0, 1, 2 (three items), but we tried to access index 5.\nHow to fix: Use a valid index:\n\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[2])  # The last item\n\ncherry\n\n\n\n\nKeyError\nWhat it means: You‚Äôre trying to access a dictionary key that doesn‚Äôt exist.\n\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\"}\nprint(book[\"year\"])\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[100], line 2\n      1 book = {\"title\": \"1984\", \"author\": \"George Orwell\"}\n----&gt; 2 print(book[\"year\"])\n\nKeyError: 'year'\n\n\n\nError:\nKeyError: 'year'\nWhat went wrong: The dictionary doesn‚Äôt have a ‚Äúyear‚Äù key.\nHow to fix: Use an existing key or check if the key exists first:\n\n# Option 1: Use get() method (returns None if key doesn't exist)\nprint(book.get(\"year\"))\n\n# Option 2: Check if key exists\nif \"year\" in book:\n    print(book[\"year\"])\nelse:\n    print(\"Year not found\")\n\nNone\nYear not found\n\n\n\n\nIndentationError\nWhat it means: Your code indentation is inconsistent or incorrect.\n\ndef greet():\nprint(\"Hello\")\n\n\n  Cell In[102], line 2\n    print(\"Hello\")\n    ^\nIndentationError: expected an indented block after function definition on line 1\n\n\n\n\nError:\nIndentationError: expected an indented block\nWhat went wrong: The function body needs to be indented.\nHow to fix:\n\ndef greet():\n    print(\"Hello\")\n\nAnother example (mixing tabs and spaces):\n\nif True:\n    print(\"First line\")\n        print(\"Second line\")  # Too much indentation\n\n\n  Cell In[104], line 3\n    print(\"Second line\")  # Too much indentation\n    ^\nIndentationError: unexpected indent\n\n\n\n\nError:\nIndentationError: unexpected indent\n\n\n\n\n\n\nWarning‚ö†Ô∏è Warning\n\n\n\nAlways use spaces for indentation in Python (4 spaces is the standard). Don‚Äôt mix tabs and spaces!\n\n\n\n\nValueError\nWhat it means: You passed a value of the right type but inappropriate value.\n\nnumber = int(\"hello\")\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[105], line 1\n----&gt; 1 number = int(\"hello\")\n\nValueError: invalid literal for int() with base 10: 'hello'\n\n\n\nError:\nValueError: invalid literal for int() with base 10: 'hello'\nWhat went wrong: ‚Äúhello‚Äù can‚Äôt be converted to an integer.\nHow to fix: Use a string that represents a number:\n\nnumber = int(\"42\")\n\n\n\nAttributeError\nWhat it means: You‚Äôre trying to use a method or attribute that doesn‚Äôt exist for that type.\n\nnumber = 42\nresult = number.upper()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[107], line 2\n      1 number = 42\n----&gt; 2 result = number.upper()\n\nAttributeError: 'int' object has no attribute 'upper'\n\n\n\nError:\nAttributeError: 'int' object has no attribute 'upper'\nWhat went wrong: Numbers don‚Äôt have an .upper() method (only strings do).\nHow to fix: Use the correct type:\n\ntext = \"hello\"\nresult = text.upper()\n\n\n\n\nHow to Read Error Messages\nPython error messages have a standard format:\nTraceback (most recent call last):\n  File \"script.py\", line 3, in &lt;module&gt;\n    print(message)\nNameError: name 'message' is not defined\nReading from bottom to top:\n\nError type and description (NameError: name 'message' is not defined) - What went wrong\nLine number (line 3) - Where it happened\nCode snippet (print(message)) - The actual problematic line\nTraceback - The sequence of function calls leading to the error\n\n\n\n\n\n\n\nTipüí° Tip\n\n\n\nAlways read error messages from the bottom up. The last line tells you what went wrong, and the lines above show you where.\n\n\n\n\nCommon Beginner Mistakes\n\n1. Forgetting Colons\n\n# Wrong\nif x &gt; 5\n    print(\"Big\")\n\n# Right\nif x &gt; 5:\n    print(\"Big\")\n\n\n  Cell In[109], line 2\n    if x &gt; 5\n            ^\nSyntaxError: expected ':'\n\n\n\n\n\n\n2. Inconsistent Indentation\n\n# Wrong\ndef greet():\nprint(\"Hello\")\n    print(\"Welcome\")\n\n# Right\ndef greet():\n    print(\"Hello\")\n    print(\"Welcome\")\n\n\n  Cell In[110], line 3\n    print(\"Hello\")\n    ^\nIndentationError: expected an indented block after function definition on line 2\n\n\n\n\n\n\n3. Using = Instead of ==\n\n# Wrong (assignment, not comparison)\nif x = 5:\n    print(\"Five\")\n\n# Right\nif x == 5:\n    print(\"Five\")\n\n\n  Cell In[111], line 2\n    if x = 5:\n       ^\nSyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?\n\n\n\n\n\n\n4. Forgetting Quotes Around Strings\n\n# Wrong\nmessage = Hello\n\n# Right\nmessage = \"Hello\"\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[112], line 2\n      1 # Wrong\n----&gt; 2 message = Hello\n      4 # Right\n      5 message = \"Hello\"\n\nNameError: name 'Hello' is not defined\n\n\n\n\n\n5. Modifying a List While Iterating\n\n# Problematic\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        numbers.remove(num)  # Modifying while iterating!\n\n# Better\nnumbers = [1, 2, 3, 4, 5]\nnumbers = [num for num in numbers if num % 2 != 0]\n\n\n\n6. Not Converting Types\n\n# Wrong\nage = input(\"Enter age: \")\nif age &gt; 18:  # Comparing string to number!\n    print(\"Adult\")\n\n# Right\nage = int(input(\"Enter age: \"))\nif age &gt; 18:\n    print(\"Adult\")\n\n\n\n\nDebugging Strategies\n\n1. Print Debugging\nAdd print statements to see what‚Äôs happening:\n\ndef calculate(x, y):\n    print(f\"x = {x}, y = {y}\")  # Debug print\n    result = x * y\n    print(f\"result = {result}\")  # Debug print\n    return result\n\n\n\n2. Check Variable Types\nUse type() to verify types:\n\nx = \"42\"\nprint(type(x))  # &lt;class 'str'&gt;\nx = int(x)\nprint(type(x))  # &lt;class 'int'&gt;\n\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n\n\n\n\n3. Test Small Parts\nBreak your code into smaller pieces and test each part:\n# Instead of this all at once:\nresult = data.split()[0].upper().replace(\"X\", \"Y\")\n\n# Test step by step:\nstep1 = data.split()\nprint(step1)\nstep2 = step1[0]\nprint(step2)\nstep3 = step2.upper()\nprint(step3)\nresult = step3.replace(\"X\", \"Y\")\nprint(result)\n\n\n4. Use Try-Except (Advanced)\nHandle errors gracefully:\n\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\n    print(result)\nexcept ValueError:\n    print(\"That's not a valid number!\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n\n\n\n5. Read Documentation\nUse help() to understand how functions work:\n\nhelp(str.split)\n\n\n\n6. Search the Error\nCopy the error message (without your specific variable names) and search online:\n\nGood search: ‚Äúpython NameError name not defined‚Äù\nLess helpful: ‚Äúmy code doesn‚Äôt work‚Äù\n\n\n\n\nExercise A.1\nEach code snippet below has an error. Copy them into Colab one at a time and:\n\nRun the code and read the error message\nIdentify what type of error it is\nFix the error\n\nCode snippets:\n\n# Error 1\nprint(\"Hello World\"\n\n\n  Cell In[116], line 2\n    print(\"Hello World\"\n                       ^\n_IncompleteInputError: incomplete input\n\n\n\n\n\n# Error 2\nage = 25\nmessage = \"I am \" + age + \" years old\"\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[117], line 3\n      1 # Error 2\n      2 age = 25\n----&gt; 3 message = \"I am \" + age + \" years old\"\n\nTypeError: can only concatenate str (not \"int\") to str\n\n\n\n\n# Error 3\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[3])\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[118], line 3\n      1 # Error 3\n      2 words = [\"apple\", \"banana\", \"cherry\"]\n----&gt; 3 print(words[3])\n\nIndexError: list index out of range\n\n\n\n\n# Error 4\ndef greet():\nprint(\"Hello\")\n\n\n  Cell In[119], line 3\n    print(\"Hello\")\n    ^\nIndentationError: expected an indented block after function definition on line 2\n\n\n\n\n\n# Error 5\nx = 10\nif x &gt; 5\n    print(\"Big number\")\n\n\n  Cell In[120], line 3\n    if x &gt; 5\n            ^\nSyntaxError: expected ':'\n\n\n\n\n\n# Error 6\nbook = {\"title\": \"1984\", \"author\": \"Orwell\"}\nprint(book[\"year\"])\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[121], line 3\n      1 # Error 6\n      2 book = {\"title\": \"1984\", \"author\": \"Orwell\"}\n----&gt; 3 print(book[\"year\"])\n\nKeyError: 'year'\n\n\n\n\n# Error 7\ntext = \"Python\"\nresult = text.find()\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[122], line 3\n      1 # Error 7\n      2 text = \"Python\"\n----&gt; 3 result = text.find()\n\nTypeError: find expected at least 1 argument, got 0\n\n\n\n\n\nFinal Debugging Tips\n\n\n\n\n\n\nTipüí° Tips for Effective Debugging\n\n\n\n\nRead the error message carefully - Python tells you exactly what‚Äôs wrong\nCheck line numbers - But remember, the actual error might be on a previous line\nLook for typos - Variable names, function names, syntax\nVerify your assumptions - Use print() to check what values variables actually have\nSearch for help - You‚Äôre probably not the first person with this error\nTake breaks - Sometimes stepping away helps you see the problem fresh\nStart simple - Comment out code to isolate the problem\nDon‚Äôt panic - Every programmer deals with errors constantly. It‚Äôs normal!\n\n\n\n\nEnd of Tutorial\nYou now have a comprehensive reference for Python basics, from running your first code to debugging errors. Return to this document whenever you need to refresh your knowledge!"
  }
]