{
  "hash": "d2134db949e04d5bf47afc2feaee5941",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Introduction to Python for Text and Data Analysis\"\nformat: html\ndate: now\ndate-format: \"YYYY-MM-DD HH:mm:ss\"\ntoc: true\nexecute:\n  error: true\n---\n\n## Learning Outcomes\n\nAfter completing this tutorial, you will be able to:\n\n- ✓ Run Python code in Google Colab\n- ✓ Read and understand Python code\n- ✓ Work with strings for text analysis\n- ✓ Use basic data structures (lists, dictionaries)\n- ✓ Write simple functions and control flow\n- ✓ Find help and documentation online\n- ✓ Understand cloud vs. local Python environments\n- ✓ (Optional) Debug common errors\n\n---\n\n## 1. Getting Started with Google Colab\n\n### What is Google Colab?\n\nGoogle Colab (short for Colaboratory) is a free cloud service that lets you write and run Python code in your web browser. You don't need to install anything on your computer - everything runs in the cloud. This makes it perfect for getting started with Python.\n\n### Accessing Google Colab\n\n1. Go to [https://colab.research.google.com](https://colab.research.google.com)\n2. Sign in with your Google account\n3. Click on \"New Notebook\" to create a new Python notebook\n\n![Creating a new notebook](img/colab-new-notebook.png)\n\n### Understanding the Colab Interface\n\nA Colab notebook consists of **cells**. There are two main types:\n\n- **Code cells**: Where you write Python code\n- **Text cells**: Where you write notes and explanations (using Markdown)\n\n![Colab interface](img/colab-interface.png)\n\n### Running Code\n\nTo run code in a cell:\n\n- Click the **Play button** (▶) on the left side of the cell, OR\n- Press **Shift + Enter** on your keyboard\n\nThe output will appear below the cell.\n\n![Running a code cell](img/colab-run-cell.png)\n\n### Saving Your Work\n\nYour notebooks are automatically saved to your Google Drive in a folder called \"Colab Notebooks\". You can also:\n\n- Rename your notebook by clicking on the title at the top\n- Download your notebook (File → Download → Download .ipynb)\n- Share it with others (Share button in top right)\n\n::: {.callout-note}\n## 📌 Key Point\nYour Colab notebooks are saved to Google Drive, so they count toward your Drive storage quota. We'll discuss local alternatives later in this tutorial.\n:::\n\n---\n\n## 2. Your First Python Code\n\nLet's start by looking at some Python code. Don't worry if you don't understand it yet - that's what we're here to learn!\n\n::: {#44b0071b .cell execution_count=1}\n``` {.python .cell-code}\nmessage = \"Hello, World!\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n### What Just Happened?\n\nLet's break down this code:\n\n1. `message = \"Hello, World!\"` - This creates a **variable** named `message` and stores the text \"Hello, World!\" in it\n2. `print(message)` - This tells Python to display the contents of the `message` variable\n\nThink of a variable like a labeled box where you can store information. The `=` sign means \"store the value on the right into the variable on the left\".\n\n### Exercise 2.1\n\n**Copy the following code into Google Colab and run it:**\n\n::: {#e467d7a7 .cell execution_count=2}\n``` {.python .cell-code}\nmessage = \"Hello, World!\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n**Now modify it:**\n\n1. Change `\"Hello, World!\"` to `\"Python is fun!\"` and run the code again\n2. Change the variable name from `message` to `greeting` (remember to change it in both places!)\n3. Add another line: `print(\"My first Python program\")` and run the code\n\n::: {.callout-tip}\n## 💡 Tip\nVariable names can contain letters, numbers, and underscores, but they must start with a letter or underscore. Use descriptive names that help you remember what the variable contains.\n:::\n\n---\n\n## 3. Getting Help and Finding Information\n\nBefore we dive deeper into Python, let's learn how to find help when you're stuck. This is one of the most important skills for working with Python!\n\n### Using Python's Built-in Help\n\nPython has a built-in `help()` function that shows you information about functions and objects.\n\n::: {#23fd4dcc .cell execution_count=3}\n``` {.python .cell-code}\nhelp(print)\n```\n:::\n\n\nThis will display documentation about the `print` function, including how to use it.\n\n![Using the help() function](img/help-function.png)\n\n### Using dir() to Explore\n\nThe `dir()` function shows you what methods and attributes are available for an object:\n\n::: {#e80b5db0 .cell execution_count=4}\n``` {.python .cell-code}\ntext = \"hello\"\ndir(text)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n```\n:::\n:::\n\n\nThis shows all the things you can do with a string. Methods that start with `_` are internal - focus on the others like `upper`, `lower`, `split`, etc.\n\n### Reading Official Python Documentation\n\nThe official Python documentation is at [https://docs.python.org](https://docs.python.org). It's comprehensive and well-organized.\n\nFor beginners, the Python Tutorial section is especially helpful: [https://docs.python.org/3/tutorial/](https://docs.python.org/3/tutorial/)\n\n![Python documentation](img/python-docs.png)\n\n### Searching Online Effectively\n\nWhen you have a question or encounter an error:\n\n1. **Google your question** - Include \"python\" in your search\n   - Good: \"python how to convert string to lowercase\"\n   - Bad: \"make text smaller\"\n\n2. **Stack Overflow** - A Q&A site where programmers help each other\n   - Look for questions with many upvotes and accepted answers (green checkmark)\n   - Read the question to make sure it matches your problem\n\n3. **Read the error message** - Python error messages often tell you exactly what's wrong\n   - We'll cover this in detail in the optional debugging section\n\n::: {.callout-tip}\n## 💡 Tip\nWhen searching for help, include the Python version you're using. Google Colab typically uses Python 3, so add \"python 3\" to your searches.\n:::\n\n### Exercise 3.1\n\n**In Google Colab, try the following:**\n\n1. Run `help(len)` - what does the `len()` function do?\n2. Create a variable: `word = \"Python\"`, then run `dir(word)`\n3. Find a method in the output that sounds interesting (like `upper` or `lower`)\n4. Try using it: `word.upper()` or `word.lower()`\n5. Use `help(word.upper)` to learn more about that method\n\n---\n\n## 4. Basic Data Types\n\nPython works with different types of data. Let's explore the most important ones for text and data analysis.\n\n### Strings\n\nStrings are text data - anything you can type. They're enclosed in quotes (either `\"` or `'`).\n\n::: {#fbe2a33a .cell execution_count=5}\n``` {.python .cell-code}\nauthor = \"Virginia Woolf\"\ntitle = 'Mrs Dalloway'\nsentence = \"She said, 'I love Python!'\"\n```\n:::\n\n\n#### String Operations\n\n**Concatenation** (joining strings):\n\n::: {#9be22b63 .cell execution_count=6}\n``` {.python .cell-code}\nfirst_name = \"Ada\"\nlast_name = \"Lovelace\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAda Lovelace\n```\n:::\n:::\n\n\n**Getting string length**:\n\n::: {#9e4f19d0 .cell execution_count=7}\n``` {.python .cell-code}\ntext = \"Hello\"\nlength = len(text)\nprint(length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n::: {#52983e43 .cell execution_count=8}\n``` {.python .cell-code}\ntext = \"Python\"\nprint(text[0])      # First character\nprint(text[1])      # Second character\nprint(text[-1])     # Last character\nprint(text[0:3])    # Characters 0, 1, 2 (not 3)\nprint(text[2:])     # From character 2 to the end\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nP\ny\nn\nPyt\nthon\n```\n:::\n:::\n\n\n#### String Methods\n\nStrings have many built-in methods (functions that belong to strings):\n\n**Changing case**:\n\n::: {#478bf842 .cell execution_count=9}\n``` {.python .cell-code}\ntext = \"Hello World\"\nprint(text.lower())\nprint(text.upper())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello world\nHELLO WORLD\n```\n:::\n:::\n\n\n::: {#ea1e781d .cell execution_count=10}\n``` {.python .cell-code}\nsentence = \"Python is great for text analysis\"\nwords = sentence.split()\nprint(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Python', 'is', 'great', 'for', 'text', 'analysis']\n```\n:::\n:::\n\n\n::: {#e4f3cde6 .cell execution_count=11}\n``` {.python .cell-code}\ntext = \"I like cats\"\nnew_text = text.replace(\"cats\", \"dogs\")\nprint(new_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI like dogs\n```\n:::\n:::\n\n\n::: {#d6d8856f .cell execution_count=12}\n``` {.python .cell-code}\ntext = \"   hello   \"\nprint(text.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\n```\n:::\n:::\n\n\n::: {#63f4a7ec .cell execution_count=13}\n``` {.python .cell-code}\nsentence = \"Python is amazing\"\nposition = sentence.find(\"is\")\nprint(position)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n:::\n\n\n::: {#0ebceaea .cell execution_count=14}\n``` {.python .cell-code}\ntext = \"how much wood would a woodchuck chuck\"\ncount = text.count(\"wood\")\nprint(count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n#### String Formatting with f-strings\n\nF-strings let you insert variable values into strings easily:\n\n::: {#d09e571a .cell execution_count=15}\n``` {.python .cell-code}\nname = \"Alice\"\nage = 25\nmessage = f\"My name is {name} and I am {age} years old\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Alice and I am 25 years old\n```\n:::\n:::\n\n\n### Exercise 4.1\n\n**Copy this code into Colab:**\n\n::: {#33fc3f87 .cell execution_count=16}\n``` {.python .cell-code}\nbook_title = \"pride and prejudice\"\nauthor = \"Jane Austen\"\n```\n:::\n\n\n**Modify the code to:**\n\n1. Convert `book_title` to title case using `.title()` and print it\n2. Make `author` all uppercase and print it\n3. Create a sentence using an f-string: `\"The book {book_title} was written by {author}\"`\n4. Use `.split()` on `book_title` to separate it into words and print the result\n5. Count how many times the letter \"e\" appears in `book_title`\n\n### Numbers\n\nPython works with two main types of numbers:\n\n**Integers** (whole numbers):\n\n::: {#e3d0ddba .cell execution_count=17}\n``` {.python .cell-code}\npages = 324\nchapters = 12\n```\n:::\n\n\n**Floats** (decimal numbers):\n\n::: {#1e446c01 .cell execution_count=18}\n``` {.python .cell-code}\nprice = 19.99\nrating = 4.5\n```\n:::\n\n\n#### Arithmetic Operations\n\n::: {#a69af94d .cell execution_count=19}\n``` {.python .cell-code}\n# Basic arithmetic\nprint(10 + 5)      # Addition: 15\nprint(10 - 5)      # Subtraction: 5\nprint(10 * 5)      # Multiplication: 50\nprint(10 / 5)      # Division: 2.0 (always returns float)\nprint(10 // 3)     # Integer division: 3 (rounds down)\nprint(10 % 3)      # Modulo (remainder): 1\nprint(10 ** 2)     # Exponentiation: 100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15\n5\n50\n2.0\n3\n1\n100\n```\n:::\n:::\n\n\n#### Type Conversion\n\nSometimes you need to convert between strings and numbers:\n\n::: {#50522134 .cell execution_count=20}\n``` {.python .cell-code}\n# String to number\ntext_number = \"42\"\nnumber = int(text_number)\nprint(number + 8)  # Output: 50\n\n# Number to string\nage = 25\nmessage = \"I am \" + str(age) + \" years old\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n50\nI am 25 years old\n```\n:::\n:::\n\n\n::: {.callout-warning}\n## ⚠️ Warning\nYou cannot directly concatenate strings and numbers. You'll get an error if you try `\"Age: \" + 25`. Convert the number to a string first: `\"Age: \" + str(25)`, or use an f-string: `f\"Age: {25}\"`.\n:::\n\n### Exercise 4.2\n\n**Copy this code into Colab:**\n\n::: {#70d595bc .cell execution_count=21}\n``` {.python .cell-code}\ntotal_words = 1000\npages = 5\n```\n:::\n\n\n**Modify the code to:**\n\n1. Calculate words per page by dividing `total_words` by `pages` and print it\n2. Create a variable `additional_pages = 3` and calculate the new total pages\n3. Convert the result to a string and create a message: `\"The document has X pages\"` (use f-string)\n4. Calculate how many pages you'd have if you doubled the current number\n\n### Booleans\n\nBooleans represent True or False values. They're essential for making decisions in code.\n\n::: {#45e40fcf .cell execution_count=22}\n``` {.python .cell-code}\nis_published = True\nis_draft = False\n```\n:::\n\n\n#### Comparison Operators\n\nThese operators compare values and return True or False:\n\n::: {#57079a53 .cell execution_count=23}\n``` {.python .cell-code}\nx = 10\ny = 5\n\nprint(x > y)       # Greater than: True\nprint(x < y)       # Less than: False\nprint(x == y)      # Equal to: False\nprint(x != y)      # Not equal to: True\nprint(x >= 10)     # Greater than or equal: True\nprint(x <= 5)      # Less than or equal: False\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\nFalse\nTrue\nTrue\nFalse\n```\n:::\n:::\n\n\n::: {.callout-note}\n## 📌 Key Point\nUse `==` to compare values (equality test) and `=` to assign values to variables. This is a common source of confusion!\n:::\n\nYou can also compare strings:\n\n::: {#5ada0d13 .cell execution_count=24}\n``` {.python .cell-code}\nword1 = \"apple\"\nword2 = \"banana\"\nprint(word1 == word2)    # False\nprint(word1 < word2)     # True (alphabetical order)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n```\n:::\n:::\n\n\n### Exercise 4.3\n\n**Copy this code into Colab:**\n\n::: {#4fb28935 .cell execution_count=25}\n``` {.python .cell-code}\nword_count = 150\nminimum_required = 100\n```\n:::\n\n\n**Modify the code to:**\n\n1. Check if `word_count` is greater than `minimum_required` and print the result\n2. Check if `word_count` equals 150 and print the result\n3. Check if `word_count` is not equal to 200 and print the result\n4. Change `word_count` to 75 and run the comparisons again\n\n---\n\n## 5. Data Structures\n\nData structures let you organize and store multiple pieces of information together.\n\n### Lists\n\nLists are ordered collections of items. They're perfect for storing sequences of data.\n\n::: {#7c8c92e9 .cell execution_count=26}\n``` {.python .cell-code}\nauthors = [\"Virginia Woolf\", \"James Joyce\", \"Marcel Proust\"]\nword_counts = [150, 200, 175, 300]\nmixed_data = [\"Python\", 3, True, 19.99]\n```\n:::\n\n\n#### Accessing List Items\n\nLists use zero-based indexing, just like strings:\n\n::: {#98e16ad7 .cell execution_count=27}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(fruits[0])      # First item: apple\nprint(fruits[1])      # Second item: banana\nprint(fruits[-1])     # Last item: date\nprint(fruits[-2])     # Second to last: cherry\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\nbanana\ndate\ncherry\n```\n:::\n:::\n\n\n#### Slicing Lists\n\n::: {#56b98e83 .cell execution_count=28}\n``` {.python .cell-code}\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numbers[2:5])    # Items 2, 3, 4: [2, 3, 4]\nprint(numbers[:3])     # First 3 items: [0, 1, 2]\nprint(numbers[7:])     # From index 7 to end: [7, 8, 9]\nprint(numbers[::2])    # Every other item: [0, 2, 4, 6, 8]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 3, 4]\n[0, 1, 2]\n[7, 8, 9]\n[0, 2, 4, 6, 8]\n```\n:::\n:::\n\n\n#### Modifying Lists\n\n**Adding items**:\n\n::: {#628f9f87 .cell execution_count=29}\n``` {.python .cell-code}\nbooks = [\"1984\", \"Brave New World\"]\nbooks.append(\"Fahrenheit 451\")\nprint(books)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1984', 'Brave New World', 'Fahrenheit 451']\n```\n:::\n:::\n\n\n::: {#c55a1590 .cell execution_count=30}\n``` {.python .cell-code}\nbooks = [\"1984\", \"Brave New World\", \"Fahrenheit 451\"]\nbooks.remove(\"Brave New World\")\nprint(books)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['1984', 'Fahrenheit 451']\n```\n:::\n:::\n\n\n::: {#0c313322 .cell execution_count=31}\n``` {.python .cell-code}\nbooks = [\"1984\", \"Brave New World\", \"Fahrenheit 451\"]\nlast_book = books.pop()\nprint(last_book)\nprint(books)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFahrenheit 451\n['1984', 'Brave New World']\n```\n:::\n:::\n\n\n#### List Methods\n\n**Getting list length**:\n\n::: {#d992e3ce .cell execution_count=32}\n``` {.python .cell-code}\nwords = [\"the\", \"quick\", \"brown\", \"fox\"]\nprint(len(words))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n::: {#7b916e39 .cell execution_count=33}\n``` {.python .cell-code}\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\nnumbers.sort()\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 1, 2, 3, 4, 5, 6, 9]\n```\n:::\n:::\n\n\n::: {#a8039251 .cell execution_count=34}\n``` {.python .cell-code}\nletters = [\"a\", \"b\", \"c\", \"d\"]\nletters.reverse()\nprint(letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['d', 'c', 'b', 'a']\n```\n:::\n:::\n\n\n::: {#d9d7d5a3 .cell execution_count=35}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"banana\" in fruits)\nprint(\"grape\" in fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n#### Lists of Strings (Text Analysis)\n\nLists are especially useful for working with text data:\n\n::: {#369d6f76 .cell execution_count=36}\n``` {.python .cell-code}\nsentence = \"Python is great for text analysis\"\nwords = sentence.split()\nprint(words)\nprint(f\"Number of words: {len(words)}\")\nprint(f\"First word: {words[0]}\")\nprint(f\"Last word: {words[-1]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Python', 'is', 'great', 'for', 'text', 'analysis']\nNumber of words: 6\nFirst word: Python\nLast word: analysis\n```\n:::\n:::\n\n\n### Exercise 5.1\n\n**Copy this code into Colab:**\n\n::: {#f644bc57 .cell execution_count=37}\n``` {.python .cell-code}\ntext = \"to be or not to be that is the question\"\nwords = text.split()\n```\n:::\n\n\n**Modify the code to:**\n\n1. Print the length of the `words` list\n2. Print the first word and the last word\n3. Use `.append()` to add the word \"indeed\" to the end of the list\n4. Use `.remove()` to remove the first occurrence of \"to\"\n5. Sort the words alphabetically and print the result\n\n### Dictionaries\n\nDictionaries store data as **key-value pairs**. They're like a real dictionary where you look up a word (key) to find its definition (value).\n\n::: {#a6b828a7 .cell execution_count=38}\n``` {.python .cell-code}\nbook = {\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"year\": 1949,\n    \"pages\": 328\n}\n```\n:::\n\n\n#### Accessing Dictionary Values\n\nUse keys to access values:\n\n::: {#987acdb0 .cell execution_count=39}\n``` {.python .cell-code}\nbook = {\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"year\": 1949\n}\n\nprint(book[\"title\"])\nprint(book[\"author\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1984\nGeorge Orwell\n```\n:::\n:::\n\n\n#### Adding or Modifying Entries\n\n::: {#bdefbe8b .cell execution_count=40}\n``` {.python .cell-code}\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\"}\n\n# Add a new entry\nbook[\"year\"] = 1949\nprint(book)\n\n# Modify an existing entry\nbook[\"year\"] = 1950\nprint(book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'title': '1984', 'author': 'George Orwell', 'year': 1949}\n{'title': '1984', 'author': 'George Orwell', 'year': 1950}\n```\n:::\n:::\n\n\n#### Dictionary Methods\n\n**Getting all keys**:\n\n::: {#d0c90db4 .cell execution_count=41}\n``` {.python .cell-code}\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\", \"year\": 1949}\nprint(book.keys())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['title', 'author', 'year'])\n```\n:::\n:::\n\n\n::: {#30b9029e .cell execution_count=42}\n``` {.python .cell-code}\nprint(book.values())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_values(['1984', 'George Orwell', 1949])\n```\n:::\n:::\n\n\n::: {#c8eaa9b7 .cell execution_count=43}\n``` {.python .cell-code}\nprint(book.items())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_items([('title', '1984'), ('author', 'George Orwell'), ('year', 1949)])\n```\n:::\n:::\n\n\n::: {#cf1ca304 .cell execution_count=44}\n``` {.python .cell-code}\nprint(\"author\" in book)\nprint(\"publisher\" in book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\n#### Dictionaries for Text Analysis\n\nDictionaries are useful for counting and organizing text data:\n\n::: {#94d8b23e .cell execution_count=45}\n``` {.python .cell-code}\nword_frequencies = {\n    \"the\": 150,\n    \"and\": 89,\n    \"to\": 76,\n    \"of\": 72\n}\n\nprint(f\"The word 'the' appears {word_frequencies['the']} times\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe word 'the' appears 150 times\n```\n:::\n:::\n\n\n### Exercise 5.2\n\n**Copy this code into Colab:**\n\n::: {#0d333a7c .cell execution_count=46}\n``` {.python .cell-code}\npoem = {\n    \"title\": \"The Road Not Taken\",\n    \"author\": \"Robert Frost\",\n    \"year\": 1916\n}\n```\n:::\n\n\n**Modify the code to:**\n\n1. Print the poem's title\n2. Add a new key \"lines\" with the value 20\n3. Change the year to 1915\n4. Print all the keys in the dictionary\n5. Print all the values in the dictionary\n6. Check if \"publisher\" is a key in the dictionary and print the result\n\n---\n\n## 6. Control Flow\n\nControl flow lets you make decisions and repeat actions in your code.\n\n### If Statements\n\nIf statements let your code make decisions based on conditions.\n\n::: {#0ad2242a .cell execution_count=47}\n``` {.python .cell-code}\nword_count = 150\nminimum = 100\n\nif word_count >= minimum:\n    print(\"You have enough words!\")\n    print(\"Good job!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou have enough words!\nGood job!\n```\n:::\n:::\n\n\nOutput (if word_count is 150):\n```\nYou have enough words!\nGood job!\n```\n\n::: {.callout-note}\n## 📌 Key Point\nNotice the **indentation** (spaces at the start of lines). Python uses indentation to group code together. Everything indented under the `if` statement runs only if the condition is True.\n:::\n\n#### If-Else\n\n::: {#5b569fbd .cell execution_count=48}\n``` {.python .cell-code}\nword_count = 75\nminimum = 100\n\nif word_count >= minimum:\n    print(\"You have enough words!\")\nelse:\n    print(\"You need more words\")\n    words_needed = minimum - word_count\n    print(f\"You need {words_needed} more words\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou need more words\nYou need 25 more words\n```\n:::\n:::\n\n\n#### If-Elif-Else\n\nUse `elif` (else-if) for multiple conditions:\n\n::: {#8bae5d07 .cell execution_count=49}\n``` {.python .cell-code}\nscore = 85\n\nif score >= 90:\n    grade = \"A\"\nelif score >= 80:\n    grade = \"B\"\nelif score >= 70:\n    grade = \"C\"\nelse:\n    grade = \"F\"\n\nprint(f\"Your grade is: {grade}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYour grade is: B\n```\n:::\n:::\n\n\n### Exercise 6.1\n\n**Copy this code into Colab:**\n\n::: {#746c1688 .cell execution_count=50}\n``` {.python .cell-code}\ntext = \"Python\"\n```\n:::\n\n\n**Modify the code to:**\n\n1. Check if the length of `text` is greater than 5. If it is, print \"Long word\", otherwise print \"Short word\"\n2. Change `text` to different words and test your code\n3. Modify your code to handle three cases: length > 8 (print \"Very long\"), length > 5 (print \"Medium\"), otherwise (print \"Short\")\n\n### Loops\n\nLoops let you repeat actions multiple times.\n\n#### For Loops\n\nFor loops iterate over sequences (lists, strings, etc.):\n\n**Looping over a list**:\n\n::: {#6f49ca7d .cell execution_count=51}\n``` {.python .cell-code}\nwords = [\"Python\", \"is\", \"great\"]\nfor word in words:\n    print(word)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython\nis\ngreat\n```\n:::\n:::\n\n\n::: {#e68fd15a .cell execution_count=52}\n``` {.python .cell-code}\ntext = \"Python\"\nfor letter in text:\n    print(letter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nP\ny\nt\nh\no\nn\n```\n:::\n:::\n\n\n::: {#bdcfd244 .cell execution_count=53}\n``` {.python .cell-code}\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n::: {#fbcbb583 .cell execution_count=54}\n``` {.python .cell-code}\n# From 1 to 5\nfor i in range(1, 6):\n    print(i)\n\n# From 0 to 10, counting by 2\nfor i in range(0, 11, 2):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n0\n2\n4\n6\n8\n10\n```\n:::\n:::\n\n\n**Combining loops and if statements**:\n\n::: {#eeb605a2 .cell execution_count=55}\n``` {.python .cell-code}\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nfor word in words:\n    if len(word) > 5:\n        print(f\"{word} is a long word\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbanana is a long word\ncherry is a long word\n```\n:::\n:::\n\n\n::: {#4c442e5a .cell execution_count=56}\n``` {.python .cell-code}\nword_counts = {\"the\": 150, \"and\": 89, \"to\": 76}\n\n# Loop over keys\nfor word in word_counts:\n    print(word)\n\n# Loop over keys and values\nfor word, count in word_counts.items():\n    print(f\"{word}: {count}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe\nand\nto\nthe: 150\nand: 89\nto: 76\n```\n:::\n:::\n\n\n#### While Loops\n\nWhile loops repeat as long as a condition is True:\n\n::: {#871e4f20 .cell execution_count=57}\n``` {.python .cell-code}\ncount = 0\nwhile count < 5:\n    print(count)\n    count = count + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\n### Exercise 6.2\n\n**Copy this code into Colab:**\n\n::: {#2223f2a9 .cell execution_count=58}\n``` {.python .cell-code}\nsentence = \"the quick brown fox jumps over the lazy dog\"\nwords = sentence.split()\n```\n:::\n\n\n**Modify the code to:**\n\n1. Use a for loop to print each word in `words`\n2. Use a for loop with an if statement to print only words with more than 3 letters\n3. Use a for loop to count how many words start with the letter \"t\" (use `.startswith(\"t\")`)\n4. Use `range()` to print the first 5 numbers (0-4)\n5. Change the range to print numbers from 1 to 10\n\n---\n\n## 7. Functions\n\nFunctions are reusable blocks of code that perform specific tasks.\n\n### Looking at Function Code First\n\n::: {#00966491 .cell execution_count=59}\n``` {.python .cell-code}\ndef greet(name):\n    message = f\"Hello, {name}!\"\n    return message\n\nresult = greet(\"Alice\")\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\n```\n:::\n:::\n\n\n### What Are Functions?\n\nLet's break down that code:\n\n1. `def greet(name):` - This **defines** a function named `greet` that takes one **parameter** called `name`\n2. The indented code is the **function body** - what the function does\n3. `return message` - This sends the result back to whoever called the function\n4. `greet(\"Alice\")` - This **calls** (runs) the function with the argument `\"Alice\"`\n\nThink of functions like recipes: you define the recipe once, then you can follow it many times with different ingredients.\n\n### Built-in Functions Review\n\nWe've already been using Python's built-in functions:\n\n::: {#e472c01e .cell execution_count=60}\n``` {.python .cell-code}\n# len() - get length\ntext = \"Python\"\nprint(len(text))  # 6\n\n# type() - check data type\nprint(type(42))        # <class 'int'>\nprint(type(\"hello\"))   # <class 'str'>\nprint(type([1, 2, 3])) # <class 'list'>\n\n# print() - display output\nprint(\"Hello, World!\")\n\n# input() - get user input (works in Colab!)\nname = input(\"What is your name? \")\nprint(f\"Hello, {name}\")\n```\n:::\n\n\n### Creating Custom Functions\n\n**Function without parameters**:\n\n::: {#ee57e693 .cell execution_count=61}\n``` {.python .cell-code}\ndef say_hello():\n    print(\"Hello, World!\")\n    \nsay_hello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n::: {#52244200 .cell execution_count=62}\n``` {.python .cell-code}\ndef create_greeting(first_name, last_name):\n    full_name = f\"{first_name} {last_name}\"\n    greeting = f\"Welcome, {full_name}!\"\n    return greeting\n\nmessage = create_greeting(\"Ada\", \"Lovelace\")\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome, Ada Lovelace!\n```\n:::\n:::\n\n\n::: {#abf6ab5a .cell execution_count=63}\n``` {.python .cell-code}\ndef greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\nprint(greet(\"Alice\"))\nprint(greet(\"Bob\", \"Hi\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\nHi, Bob!\n```\n:::\n:::\n\n\n::: {#5eb6732a .cell execution_count=64}\n``` {.python .cell-code}\ndef count_words(text):\n    words = text.split()\n    return len(words)\n\nsentence = \"Python is great for text analysis\"\nnum_words = count_words(sentence)\nprint(f\"The sentence has {num_words} words\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe sentence has 6 words\n```\n:::\n:::\n\n\n::: {#f3931c3c .cell execution_count=65}\n``` {.python .cell-code}\ndef analyze_text(text):\n    num_chars = len(text)\n    num_words = len(text.split())\n    return num_chars, num_words\n\ntext = \"Hello, World!\"\nchars, words = analyze_text(text)\nprint(f\"Characters: {chars}, Words: {words}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCharacters: 13, Words: 2\n```\n:::\n:::\n\n\n### Exercise 7.1\n\n**Copy this code into Colab:**\n\n::: {#c0cca517 .cell execution_count=66}\n``` {.python .cell-code}\ndef process_word(word):\n    return word.upper()\n\nresult = process_word(\"python\")\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPYTHON\n```\n:::\n:::\n\n\n**Modify the code to:**\n\n1. Change the function to return `word.lower()` instead\n2. Add a second parameter `case_type` and use an if statement to return either uppercase or lowercase based on the parameter\n3. Create a new function `count_letter(text, letter)` that counts how many times a specific letter appears in text\n4. Test your function with different texts and letters\n\n---\n\n## 8. Working with Files\n\nWorking with files lets you read and write data stored on your computer (or in Colab's temporary storage).\n\n### Reading Text Files\n\n::: {#d1704477 .cell execution_count=67}\n``` {.python .cell-code}\n# Open and read a file\nfile = open(\"sample.txt\", \"r\")\ncontent = file.read()\nprint(content)\nfile.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is line 1\nThis is line 2\nThis is line 3\n\n```\n:::\n:::\n\n\n::: {.callout-note}\n## 📌 Key Point\nThe `\"r\"` means \"read mode\". Always close files when you're done with `file.close()` to free up resources.\n:::\n\n**Better way: Using `with` statement** (automatically closes the file):\n\n::: {#8f7f35ac .cell execution_count=68}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n# File is automatically closed here\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is line 1\nThis is line 2\nThis is line 3\n\n```\n:::\n:::\n\n\n**Reading line by line**:\n\n::: {#51efd17f .cell execution_count=69}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"r\") as file:\n    for line in file:\n        print(line.strip())  # strip() removes extra whitespace/newlines\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is line 1\nThis is line 2\nThis is line 3\n```\n:::\n:::\n\n\n**Reading all lines into a list**:\n\n::: {#3ecb0102 .cell execution_count=70}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"r\") as file:\n    lines = file.readlines()\n    print(f\"Number of lines: {len(lines)}\")\n    print(f\"First line: {lines[0].strip()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of lines: 3\nFirst line: This is line 1\n```\n:::\n:::\n\n\n### Writing to Text Files\n\n::: {#4a9beb90 .cell execution_count=71}\n``` {.python .cell-code}\n# Writing to a file (creates new file or overwrites existing)\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"This is a new line.\\n\")\n```\n:::\n\n\n::: {.callout-warning}\n## ⚠️ Warning\nUsing `\"w\"` mode will **overwrite** the entire file if it exists. Use `\"a\"` (append mode) to add to the end of an existing file instead.\n:::\n\n**Appending to a file**:\n\n::: {#f56587c9 .cell execution_count=72}\n``` {.python .cell-code}\nwith open(\"output.txt\", \"a\") as file:\n    file.write(\"This line is added to the end.\\n\")\n```\n:::\n\n\n**Writing multiple lines**:\n\n::: {#5330bb37 .cell execution_count=73}\n``` {.python .cell-code}\nlines = [\"First line\\n\", \"Second line\\n\", \"Third line\\n\"]\nwith open(\"output.txt\", \"w\") as file:\n    file.writelines(lines)\n```\n:::\n\n\n### File Paths in Google Colab\n\nIn Google Colab, you can:\n\n1. **Upload files** using the file browser on the left (folder icon)\n2. **Create files** in code cells\n3. **Mount Google Drive** to access your Drive files\n\n\n![Uploading files in Colab. (1) Press \"folder\" icon. (2) The upload button.](img/colab-files.png)\n\n**Creating a sample file in Colab**:\n\n::: {#c0fabe7c .cell execution_count=74}\n``` {.python .cell-code}\n# Create a sample file to practice with\nwith open(\"sample.txt\", \"w\") as file:\n    file.write(\"This is line 1\\n\")\n    file.write(\"This is line 2\\n\")\n    file.write(\"This is line 3\\n\")\n\n# Now read it back\nwith open(\"sample.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is line 1\nThis is line 2\nThis is line 3\n\n```\n:::\n:::\n\n\n### Text Analysis Example\n\n::: {#8c21132e .cell execution_count=75}\n``` {.python .cell-code}\n# Count word frequencies in a file\nword_counts = {}\n\nwith open(\"sample.txt\", \"r\") as file:\n    for line in file:\n        words = line.lower().split()\n        for word in words:\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n\nprint(word_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'this': 3, 'is': 3, 'line': 3, '1': 1, '2': 1, '3': 1}\n```\n:::\n:::\n\n\n### Exercise 8.1\n\n**Copy this code into Colab to create a sample file:**\n\n::: {#660ef418 .cell execution_count=76}\n``` {.python .cell-code}\nwith open(\"poem.txt\", \"w\") as file:\n    file.write(\"Roses are red\\n\")\n    file.write(\"Violets are blue\\n\")\n    file.write(\"Python is fun\\n\")\n    file.write(\"And so are you\\n\")\n```\n:::\n\n\n**Now modify the code to:**\n\n1. Read the file and print its contents\n2. Read the file and print only the first two lines\n3. Read the file and count the total number of words across all lines\n4. Read the file and create a list of all words (split each line and combine)\n5. Write a new file called \"output.txt\" with all the words in uppercase\n\n---\n\n## 9. Introduction to Packages\n\nSo far, we've used Python's built-in features. But Python's real power comes from **packages** (also called libraries) - collections of pre-written code that add new capabilities.\n\n### What Are Packages?\n\nPackages are like toolboxes. Each package contains functions and tools for specific tasks:\n\n- **pandas** - working with tabular data (like spreadsheets)\n- **numpy** - numerical computing and arrays\n- **matplotlib** - creating visualizations and charts\n- **nltk** - natural language processing and text analysis\n- **scikit-learn** - machine learning\n\n### Importing Packages\n\nTo use a package, you **import** it:\n\n::: {#51b804eb .cell execution_count=77}\n``` {.python .cell-code}\nimport math\n\n# Now you can use functions from the math package\nresult = math.sqrt(16)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.0\n```\n:::\n:::\n\n\n::: {#9a654d09 .cell execution_count=78}\n``` {.python .cell-code}\nimport math as m\n\nresult = m.sqrt(25)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5.0\n```\n:::\n:::\n\n\n::: {#0699c5fc .cell execution_count=79}\n``` {.python .cell-code}\nfrom math import sqrt, pi\n\nprint(sqrt(9))\nprint(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.0\n3.141592653589793\n```\n:::\n:::\n\n\n### Installing Packages in Colab\n\nMost common packages are already installed in Google Colab. If you need to install a package, use:\n\n```python\n!pip install package-name\n```\n\nThe `!` tells Colab to run this as a shell command, not Python code.\n\n::: {.callout-note}\n## 📌 Key Point\nIn Colab, you usually don't need to install packages. Just import them! We'll discuss installing packages locally in the next section.\n:::\n\n### Example: Reading CSV with Pandas\n\nLet's see a quick example using **pandas** to work with tabular data:\n\n::: {#c05a62eb .cell execution_count=80}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Create a sample dataset\ndata = {\n    \"book\": [\"1984\", \"Brave New World\", \"Fahrenheit 451\"],\n    \"author\": [\"George Orwell\", \"Aldous Huxley\", \"Ray Bradbury\"],\n    \"year\": [1949, 1932, 1953],\n    \"pages\": [328, 311, 249]\n}\n\n# Create a DataFrame (pandas' table structure)\ndf = pd.DataFrame(data)\n\n# Display the data\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              book         author  year  pages\n0             1984  George Orwell  1949    328\n1  Brave New World  Aldous Huxley  1932    311\n2   Fahrenheit 451   Ray Bradbury  1953    249\n```\n:::\n:::\n\n\n::: {#febd7e2d .cell execution_count=81}\n``` {.python .cell-code}\nprint(df[\"book\"])\nprint(df[\"year\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0               1984\n1    Brave New World\n2     Fahrenheit 451\nName: book, dtype: object\n0    1949\n1    1932\n2    1953\nName: year, dtype: int64\n```\n:::\n:::\n\n\n**Filtering data**:\n\n::: {#a9abcb49 .cell execution_count=82}\n``` {.python .cell-code}\n# Books published after 1940\nrecent_books = df[df[\"year\"] > 1940]\nprint(recent_books)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             book         author  year  pages\n0            1984  George Orwell  1949    328\n2  Fahrenheit 451   Ray Bradbury  1953    249\n```\n:::\n:::\n\n\n**Basic statistics**:\n\n::: {#5a1cada4 .cell execution_count=83}\n``` {.python .cell-code}\nprint(f\"Average pages: {df['pages'].mean()}\")\nprint(f\"Earliest year: {df['year'].min()}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage pages: 296.0\nEarliest year: 1932\n```\n:::\n:::\n\n\n**Reading from a CSV file**:\n\n::: {#62858d15 .cell execution_count=84}\n``` {.python .cell-code}\n# Create a sample CSV file first\nwith open(\"books.csv\", \"w\") as file:\n    file.write(\"book,author,year,pages\\n\")\n    file.write(\"1984,George Orwell,1949,328\\n\")\n    file.write(\"Brave New World,Aldous Huxley,1932,311\\n\")\n\n# Read it with pandas\ndf = pd.read_csv(\"books.csv\")\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              book         author  year  pages\n0             1984  George Orwell  1949    328\n1  Brave New World  Aldous Huxley  1932    311\n```\n:::\n:::\n\n\n::: {.callout-tip}\n## 💡 Tip\nPandas is incredibly powerful for data analysis. We'll explore it more deeply when working with real datasets. For now, just know that it exists and can read CSV files easily!\n:::\n\n### Exercise 9.1\n\n**Copy this code into Colab:**\n\n::: {#6e18b30e .cell execution_count=85}\n``` {.python .cell-code}\nimport pandas as pd\n\ndata = {\n    \"word\": [\"the\", \"and\", \"to\", \"of\"],\n    \"count\": [150, 89, 76, 72]\n}\n\ndf = pd.DataFrame(data)\n```\n:::\n\n\n**Modify the code to:**\n\n1. Print the entire DataFrame\n2. Print only the \"word\" column\n3. Print only the \"count\" column\n4. Find the maximum count using `df[\"count\"].max()`\n5. Find the minimum count using `df[\"count\"].min()`\n\n---\n\n## 10. Local Python Environments\n\nSo far, we've been using Google Colab, which runs Python in the cloud. But you might want to run Python on your own computer. Let's explore why and how.\n\n### Cloud vs. Local Development\n\n**Google Colab (Cloud)**:\n\n- ✓ No installation needed\n- ✓ Works on any computer with a browser\n- ✓ Free access to computing resources\n- ✗ Requires internet connection\n- ✗ Sessions timeout after inactivity\n- ✗ Uses your Google Drive storage\n- ✗ Some packages may not work\n\n**Local Python (Your Computer)**:\n\n- ✓ Works offline\n- ✓ Full control over environment\n- ✓ No session timeouts\n- ✓ All packages available\n- ✗ Requires installation and setup\n- ✗ Uses your computer's resources\n\n::: {.callout-note}\n## 📌 Key Point\nFor learning and quick experiments, Colab is perfect. For larger projects or when you need specific packages, local Python is better.\n:::\n\n### Introduction to uv (Recommended)\n\n**uv** is a modern, fast Python package and project manager. We recommend it because it's:\n\n- Very fast (much faster than traditional tools)\n- Easy to use\n- Handles both Python installation and package management\n- Becoming the industry standard\n\nLear more about uv here: [https://docs.astral.sh/uv/](https://docs.astral.sh/uv/)\n\n#### Installing uv\n\n**On macOS and Linux:**\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n**On Windows:**\n\n```powershell\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nAfter installation, close and reopen your terminal.\n\n#### Using uv\n\n**Create a new Python project:**\n\n```bash\nuv init my-project\ncd my-project\n```\n\nThis creates a new directory with a basic Python project structure.\n\n**Install a package:**\n\n```bash\nuv add pandas\n```\n\nThis installs pandas and adds it to your project's dependencies.\n\n**Run Python:**\n\n```bash\nuv run python\n```\n\nThis starts a Python interpreter with your project's packages available.\n\n**Run a Python script:**\n\n```bash\nuv run python my_script.py\n```\n\n**Install a specific Python version:**\n\n```bash\nuv python install 3.11\n```\n\n::: {.callout-tip}\n## 💡 Tip\nuv automatically creates isolated environments for each project, so different projects can use different package versions without conflicts.\n:::\n\n### Introduction to Conda (Fallback Option)\n\n**Conda** is a more established tool that also manages Python environments and packages. It's widely used in data science.\n\n#### Installing Conda\n\nDownload and install Miniconda (a minimal conda installation) from:\n[https://docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html)\n\nChoose the installer for your operating system and follow the installation instructions.\n\n![Miniconda download page. At the bottom of\n[https://www.anaconda.com/download](https://www.anaconda.com/download)](img/miniconda-download.png)\n\n![Miniconda download page. Then choose \"Miniconda Installers\"](img/miniconda-download-2.png)\n\n#### Using Conda\n\n**Create a new environment:**\n\n```bash\nconda create -n my-env python=3.11\n```\n\nThis creates a new environment named \"my-env\" with Python 3.11.\n\n**Activate the environment:**\n\n```bash\nconda activate my-env\n```\n\n**Install packages:**\n\n```bash\nconda install pandas\n```\n\n**Deactivate the environment:**\n\n```bash\nconda deactivate\n```\n\n**List all environments:**\n\n```bash\nconda env list\n```\n\n**Remove an environment:**\n\n```bash\nconda remove -n my-env --all\n```\n\n### Using Jupyter Locally\n\nOnce you have Python installed locally (with either uv or conda), you can run Jupyter notebooks on your computer.\n\n**With uv:**\n\n```bash\nuv add jupyter\nuv run jupyter notebook\n```\n\n**With conda:**\n\n```bash\nconda install jupyter\njupyter notebook\n```\n\nThis opens Jupyter in your web browser, running locally on your computer.\n\n![Jupyter running locally](img/jupyter-local.png)\n\n![Jupyter running locally. A new notebook](img/jupyter-local-2.png)\n\n![Jupyter running locally. Always have a Python kernel selected.](img/jupyter-local-3.png)\n\n![Jupyter running locally. Some useful UI elements.](img/jupyter-local-4.png)\n\n\n\n### When to Use Which Tool\n\n**Use uv when:**\n\n- Starting a new project\n- You want the fastest tool\n- You're working on modern Python projects\n- You want the latest features\n\n**Use conda when:**\n\n- Working with data science packages (it handles dependencies well)\n- You need packages that aren't on PyPI (Python Package Index)\n- You're following tutorials that use conda\n- You need packages that require complex non-Python dependencies\n\n**Use Colab when:**\n\n- Learning and experimenting\n- You don't have Python installed locally\n- You need quick access from any computer\n- You're sharing code with others who may not have Python\n\n::: {.callout-tip}\n## 💡 Tip\nMany people use multiple tools: Colab for quick experiments and learning, uv for new projects, and conda for data science work. You don't have to choose just one!\n:::\n\n### Exercise 10.1\n\n**This exercise requires setting up on your local computer (optional):**\n\n1. Install uv following the instructions for your operating system\n2. Create a new project called \"python-practice\"\n3. Add the pandas package to your project\n4. Create a file called `test.py` with this code:\n\n\n   ::: {#7ef71b2f .cell execution_count=86}\n   ``` {.python .cell-code}\n   import pandas as pd\n   print(\"Pandas version:\", pd.__version__)\n   ```\n   \n   ::: {.cell-output .cell-output-stdout}\n   ```\n   Pandas version: 2.3.3\n   ```\n   :::\n   :::\n   \n   \n5. Run the file using `uv run python test.py`\n\n**Alternative exercise with conda:**\n\n1. Install Miniconda following the instructions for your operating system\n2. Create a new environment called \"test-env\" with Python 3.11\n3. Activate the environment\n4. Install pandas\n5. Run Python and import pandas to verify it works\n\n---\n\n## 11. Conclusion\n\nCongratulations! You've completed this introduction to Python for text and data analysis.\n\n### What You've Learned\n\nYou can now:\n\n- ✓ **Run Python code** in Google Colab\n- ✓ **Read and understand** Python code by recognizing variables, data types, functions, and control flow\n- ✓ **Work with strings** using methods like `.lower()`, `.split()`, `.replace()`, and string formatting\n- ✓ **Use data structures** (lists and dictionaries) to organize data\n- ✓ **Control program flow** with if statements and loops\n- ✓ **Create functions** to organize reusable code\n- ✓ **Read and write files** for data persistence\n- ✓ **Use packages** like pandas for data analysis\n- ✓ **Find help** using `help()`, documentation, and online resources\n- ✓ **Understand the difference** between cloud (Colab) and local Python environments\n- ✓ **Set up local Python** using uv or conda (optional)\n\n### Next Steps\n\n1. **Practice regularly** - The best way to learn programming is by doing. Try writing small programs to solve problems you encounter.\n\n2. **Work with real data** - Apply these skills to actual text or datasets that interest you.\n\n3. **Learn more packages** - Explore packages like:\n   - **nltk** or **spaCy** for natural language processing\n   - **matplotlib** or **seaborn** for data visualization\n   - **numpy** for numerical computing\n   - **scikit-learn** for machine learning\n\n4. **Read other people's code** - Since you're learning to read code, study examples from tutorials and open-source projects.\n\n5. **Debug and experiment** - Don't be afraid of errors! They're a natural part of programming. See the optional debugging section for help.\n\n6. **Join communities** - Consider joining Python forums, Reddit's r/learnpython, or Stack Overflow to ask questions and learn from others.\n\n### Resources for Continued Learning\n\n- **Official Python Tutorial**: [https://docs.python.org/3/tutorial/](https://docs.python.org/3/tutorial/)\n- **Python for Data Analysis** by Wes McKinney (pandas creator)\n- **Real Python**: [https://realpython.com](https://realpython.com) - excellent tutorials\n- **Automate the Boring Stuff with Python**: Free online book at [https://automatetheboringstuff.com](https://automatetheboringstuff.com)\n\n### Keep Learning!\n\nRemember: everyone who programs started as a beginner. The key is persistence and practice. You've taken the first important steps, and you have all the foundational knowledge you need to continue learning.\n\nGood luck with your Python journey!\n\n---\n\n## Appendix A: Debugging and Error Messages (Optional)\n\nThis section is optional but important. Understanding errors will help you fix problems faster and become more independent in your learning.\n\n### Why Errors Are Helpful\n\nErrors are not failures - they're feedback! Python is telling you exactly what went wrong. Learning to read error messages is a crucial skill.\n\n### Common Error Types\n\n#### SyntaxError\n\n**What it means**: You wrote code that doesn't follow Python's grammar rules.\n\n::: {#067d11df .cell execution_count=87}\n``` {.python .cell-code}\nprint(\"Hello\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[85]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Hello\"</span>\n                 ^\n<span class=\"ansi-red-fg\">_IncompleteInputError</span><span class=\"ansi-red-fg\">:</span> incomplete input\n</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nSyntaxError: unexpected EOF while parsing\n```\n\n**What went wrong**: Missing closing parenthesis.\n\n**How to fix**: Add the closing `)`:\n\n::: {#d805d43c .cell execution_count=88}\n``` {.python .cell-code}\nprint(\"Hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\n```\n:::\n:::\n\n\n**Another example**:\n\n::: {#c4252cb1 .cell execution_count=89}\n``` {.python .cell-code}\nif x > 5\n    print(\"Big\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[87]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">if x &gt; 5</span>\n            ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> expected ':'\n</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nSyntaxError: invalid syntax\n```\n\n**What went wrong**: Missing colon after `if` statement.\n\n**How to fix**:\n\n::: {#9732c8d5 .cell execution_count=90}\n``` {.python .cell-code}\nif x > 5:\n    print(\"Big\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBig\n```\n:::\n:::\n\n\n#### NameError\n\n**What it means**: You're trying to use a variable or function that doesn't exist.\n\n\n\n::: {#205663fa .cell execution_count=92}\n``` {.python .cell-code}\nprint(message)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[90]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">message</span>)\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'message' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nNameError: name 'message' is not defined\n```\n\n**What went wrong**: The variable `message` was never created.\n\n**How to fix**: Define the variable first:\n\n::: {#e9385eb4 .cell execution_count=93}\n``` {.python .cell-code}\nmessage = \"Hello\"\nprint(message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello\n```\n:::\n:::\n\n\n**Common cause**: Typos in variable names\n\n::: {#21f012a1 .cell execution_count=94}\n``` {.python .cell-code}\nmy_name = \"Alice\"\nprint(my_nane)  # Typo: 'nane' instead of 'name'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[92]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> my_name = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Alice</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">my_nane</span>)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Typo: 'nane' instead of 'name'</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'my_nane' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### TypeError\n\n**What it means**: You're using a value in a way that doesn't work with its type.\n\n::: {#09fa8749 .cell execution_count=95}\n``` {.python .cell-code}\nage = 25\nmessage = \"I am \" + age\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[93]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> age = <span class=\"ansi-green-fg\">25</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> message = <span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">I am </span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">age</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nTypeError: can only concatenate str (not \"int\") to str\n```\n\n**What went wrong**: Can't directly add a string and a number.\n\n**How to fix**: Convert the number to a string:\n\n::: {#e3388c6b .cell execution_count=96}\n``` {.python .cell-code}\nage = 25\nmessage = \"I am \" + str(age)\n# OR use an f-string:\nmessage = f\"I am {age}\"\n```\n:::\n\n\n\n\n**Another example**:\n\n::: {#95e95633 .cell execution_count=98}\n``` {.python .cell-code}\ntext = \"Python\"\nprint(text[0:3])\ntext[0] = \"p\"  # Trying to change a character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPyt\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[96]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> text = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Python</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(text[<span class=\"ansi-green-fg\">0</span>:<span class=\"ansi-green-fg\">3</span>])\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> <span class=\"ansi-yellow-bg\">text</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-green-fg ansi-yellow-bg\">0</span><span class=\"ansi-yellow-bg\">]</span> = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">p</span><span class=\"ansi-yellow-fg\">\"</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># Trying to change a character</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'str' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nTypeError: 'str' object does not support item assignment\n```\n\n**What went wrong**: Strings are immutable (can't be changed).\n\n**How to fix**: Create a new string:\n\n::: {#df08b560 .cell execution_count=99}\n``` {.python .cell-code}\ntext = \"Python\"\ntext = \"p\" + text[1:]\n```\n:::\n\n\n#### IndexError\n\n**What it means**: You're trying to access a list/string position that doesn't exist.\n\n::: {#ffea465d .cell execution_count=100}\n``` {.python .cell-code}\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[5])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[98]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> words = [<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">apple</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">banana</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">cherry</span><span class=\"ansi-yellow-fg\">\"</span>]\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">words</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-green-fg ansi-yellow-bg\">5</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nIndexError: list index out of range\n```\n\n**What went wrong**: The list only has indices 0, 1, 2 (three items), but we tried to access index 5.\n\n**How to fix**: Use a valid index:\n\n::: {#09701592 .cell execution_count=101}\n``` {.python .cell-code}\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[2])  # The last item\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncherry\n```\n:::\n:::\n\n\n#### KeyError\n\n**What it means**: You're trying to access a dictionary key that doesn't exist.\n\n::: {#72291455 .cell execution_count=102}\n``` {.python .cell-code}\nbook = {\"title\": \"1984\", \"author\": \"George Orwell\"}\nprint(book[\"year\"])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">KeyError</span>                                  Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[100]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> book = {<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">title</span><span class=\"ansi-yellow-fg\">\"</span>: <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">1984</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">author</span><span class=\"ansi-yellow-fg\">\"</span>: <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">George Orwell</span><span class=\"ansi-yellow-fg\">\"</span>}\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">book</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">year</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg\">KeyError</span>: 'year'</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nKeyError: 'year'\n```\n\n**What went wrong**: The dictionary doesn't have a \"year\" key.\n\n**How to fix**: Use an existing key or check if the key exists first:\n\n::: {#cf9b4076 .cell execution_count=103}\n``` {.python .cell-code}\n# Option 1: Use get() method (returns None if key doesn't exist)\nprint(book.get(\"year\"))\n\n# Option 2: Check if key exists\nif \"year\" in book:\n    print(book[\"year\"])\nelse:\n    print(\"Year not found\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\nYear not found\n```\n:::\n:::\n\n\n#### IndentationError\n\n**What it means**: Your code indentation is inconsistent or incorrect.\n\n::: {#e9e4d0a8 .cell execution_count=104}\n``` {.python .cell-code}\ndef greet():\nprint(\"Hello\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[102]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Hello\")</span>\n    ^\n<span class=\"ansi-red-fg\">IndentationError</span><span class=\"ansi-red-fg\">:</span> expected an indented block after function definition on line 1\n</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nIndentationError: expected an indented block\n```\n\n**What went wrong**: The function body needs to be indented.\n\n**How to fix**:\n\n::: {#73cc3c10 .cell execution_count=105}\n``` {.python .cell-code}\ndef greet():\n    print(\"Hello\")\n```\n:::\n\n\n**Another example** (mixing tabs and spaces):\n\n::: {#96c0f5b0 .cell execution_count=106}\n``` {.python .cell-code}\nif True:\n    print(\"First line\")\n        print(\"Second line\")  # Too much indentation\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[104]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Second line\")  # Too much indentation</span>\n    ^\n<span class=\"ansi-red-fg\">IndentationError</span><span class=\"ansi-red-fg\">:</span> unexpected indent\n</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nIndentationError: unexpected indent\n```\n\n::: {.callout-warning}\n## ⚠️ Warning\nAlways use spaces for indentation in Python (4 spaces is the standard). Don't mix tabs and spaces!\n:::\n\n#### ValueError\n\n**What it means**: You passed a value of the right type but inappropriate value.\n\n::: {#dc0620b1 .cell execution_count=107}\n``` {.python .cell-code}\nnumber = int(\"hello\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[105]</span><span class=\"ansi-green-fg\">, line 1</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> number = <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">int</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">hello</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg\">ValueError</span>: invalid literal for int() with base 10: 'hello'</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nValueError: invalid literal for int() with base 10: 'hello'\n```\n\n**What went wrong**: \"hello\" can't be converted to an integer.\n\n**How to fix**: Use a string that represents a number:\n\n::: {#a6d320e2 .cell execution_count=108}\n``` {.python .cell-code}\nnumber = int(\"42\")\n```\n:::\n\n\n#### AttributeError\n\n**What it means**: You're trying to use a method or attribute that doesn't exist for that type.\n\n::: {#fbd27a53 .cell execution_count=109}\n``` {.python .cell-code}\nnumber = 42\nresult = number.upper()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[107]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> number = <span class=\"ansi-green-fg\">42</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> result = <span class=\"ansi-yellow-bg\">number</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">upper</span>()\n\n<span class=\"ansi-red-fg\">AttributeError</span>: 'int' object has no attribute 'upper'</pre>\n```\n:::\n\n:::\n:::\n\n\nError:\n```\nAttributeError: 'int' object has no attribute 'upper'\n```\n\n**What went wrong**: Numbers don't have an `.upper()` method (only strings do).\n\n**How to fix**: Use the correct type:\n\n::: {#6e61298e .cell execution_count=110}\n``` {.python .cell-code}\ntext = \"hello\"\nresult = text.upper()\n```\n:::\n\n\n### How to Read Error Messages\n\nPython error messages have a standard format:\n\n```\nTraceback (most recent call last):\n  File \"script.py\", line 3, in <module>\n    print(message)\nNameError: name 'message' is not defined\n```\n\nReading from bottom to top:\n\n1. **Error type and description** (`NameError: name 'message' is not defined`) - What went wrong\n2. **Line number** (`line 3`) - Where it happened\n3. **Code snippet** (`print(message)`) - The actual problematic line\n4. **Traceback** - The sequence of function calls leading to the error\n\n::: {.callout-tip}\n## 💡 Tip\nAlways read error messages from the bottom up. The last line tells you what went wrong, and the lines above show you where.\n:::\n\n### Common Beginner Mistakes\n\n#### 1. Forgetting Colons\n\n::: {#1187d90a .cell execution_count=111}\n``` {.python .cell-code}\n# Wrong\nif x > 5\n    print(\"Big\")\n\n# Right\nif x > 5:\n    print(\"Big\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[109]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">if x &gt; 5</span>\n            ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> expected ':'\n</pre>\n```\n:::\n\n:::\n:::\n\n\n#### 2. Inconsistent Indentation\n\n::: {#d87f2935 .cell execution_count=112}\n``` {.python .cell-code}\n# Wrong\ndef greet():\nprint(\"Hello\")\n    print(\"Welcome\")\n\n# Right\ndef greet():\n    print(\"Hello\")\n    print(\"Welcome\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[110]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Hello\")</span>\n    ^\n<span class=\"ansi-red-fg\">IndentationError</span><span class=\"ansi-red-fg\">:</span> expected an indented block after function definition on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n#### 3. Using = Instead of ==\n\n::: {#a1b5a8e5 .cell execution_count=113}\n``` {.python .cell-code}\n# Wrong (assignment, not comparison)\nif x = 5:\n    print(\"Five\")\n\n# Right\nif x == 5:\n    print(\"Five\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[111]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">if x = 5:</span>\n       ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> invalid syntax. Maybe you meant '==' or ':=' instead of '='?\n</pre>\n```\n:::\n\n:::\n:::\n\n\n#### 4. Forgetting Quotes Around Strings\n\n::: {#5ac52d7d .cell execution_count=114}\n``` {.python .cell-code}\n# Wrong\nmessage = Hello\n\n# Right\nmessage = \"Hello\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[112]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Wrong</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> message = <span class=\"ansi-yellow-bg\">Hello</span>\n<span class=\"ansi-green-fg\">      4</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Right</span>\n<span class=\"ansi-green-fg\">      5</span> message = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Hello</span><span class=\"ansi-yellow-fg\">\"</span>\n\n<span class=\"ansi-red-fg\">NameError</span>: name 'Hello' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\n#### 5. Modifying a List While Iterating\n\n::: {#49335798 .cell execution_count=115}\n``` {.python .cell-code}\n# Problematic\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        numbers.remove(num)  # Modifying while iterating!\n\n# Better\nnumbers = [1, 2, 3, 4, 5]\nnumbers = [num for num in numbers if num % 2 != 0]\n```\n:::\n\n\n#### 6. Not Converting Types\n\n::: {#33381fd0 .cell execution_count=116}\n``` {.python .cell-code}\n# Wrong\nage = input(\"Enter age: \")\nif age > 18:  # Comparing string to number!\n    print(\"Adult\")\n\n# Right\nage = int(input(\"Enter age: \"))\nif age > 18:\n    print(\"Adult\")\n```\n:::\n\n\n### Debugging Strategies\n\n#### 1. Print Debugging\n\nAdd print statements to see what's happening:\n\n::: {#016d2233 .cell execution_count=117}\n``` {.python .cell-code}\ndef calculate(x, y):\n    print(f\"x = {x}, y = {y}\")  # Debug print\n    result = x * y\n    print(f\"result = {result}\")  # Debug print\n    return result\n```\n:::\n\n\n#### 2. Check Variable Types\n\nUse `type()` to verify types:\n\n::: {#ac385bef .cell execution_count=118}\n``` {.python .cell-code}\nx = \"42\"\nprint(type(x))  # <class 'str'>\nx = int(x)\nprint(type(x))  # <class 'int'>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'str'>\n<class 'int'>\n```\n:::\n:::\n\n\n#### 3. Test Small Parts\n\nBreak your code into smaller pieces and test each part:\n\n```python\n# Instead of this all at once:\nresult = data.split()[0].upper().replace(\"X\", \"Y\")\n\n# Test step by step:\nstep1 = data.split()\nprint(step1)\nstep2 = step1[0]\nprint(step2)\nstep3 = step2.upper()\nprint(step3)\nresult = step3.replace(\"X\", \"Y\")\nprint(result)\n```\n\n#### 4. Use Try-Except (Advanced)\n\nHandle errors gracefully:\n\n::: {#823474c8 .cell execution_count=119}\n``` {.python .cell-code}\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 100 / number\n    print(result)\nexcept ValueError:\n    print(\"That's not a valid number!\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n```\n:::\n\n\n#### 5. Read Documentation\n\nUse `help()` to understand how functions work:\n\n::: {#b7275215 .cell execution_count=120}\n``` {.python .cell-code}\nhelp(str.split)\n```\n:::\n\n\n#### 6. Search the Error\n\nCopy the error message (without your specific variable names) and search online:\n\n- Good search: \"python NameError name not defined\"\n- Less helpful: \"my code doesn't work\"\n\n### Exercise A.1\n\n**Each code snippet below has an error. Copy them into Colab one at a time and:**\n\n1. Run the code and read the error message\n2. Identify what type of error it is\n3. Fix the error\n\n**Code snippets:**\n\n::: {#4f9440f1 .cell execution_count=121}\n``` {.python .cell-code}\n# Error 1\nprint(\"Hello World\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[116]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Hello World\"</span>\n                       ^\n<span class=\"ansi-red-fg\">_IncompleteInputError</span><span class=\"ansi-red-fg\">:</span> incomplete input\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#c0d5c413 .cell execution_count=122}\n``` {.python .cell-code}\n# Error 2\nage = 25\nmessage = \"I am \" + age + \" years old\"\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[117]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Error 2</span>\n<span class=\"ansi-green-fg\">      2</span> age = <span class=\"ansi-green-fg\">25</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> message = <span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">I am </span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">age</span> + <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\"> years old</span><span class=\"ansi-yellow-fg\">\"</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#e815a0b4 .cell execution_count=123}\n``` {.python .cell-code}\n# Error 3\nwords = [\"apple\", \"banana\", \"cherry\"]\nprint(words[3])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IndexError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[118]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Error 3</span>\n<span class=\"ansi-green-fg\">      2</span> words = [<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">apple</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">banana</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">cherry</span><span class=\"ansi-yellow-fg\">\"</span>]\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">words</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-green-fg ansi-yellow-bg\">3</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg\">IndexError</span>: list index out of range</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a31b3027 .cell execution_count=124}\n``` {.python .cell-code}\n# Error 4\ndef greet():\nprint(\"Hello\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[119]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">print(\"Hello\")</span>\n    ^\n<span class=\"ansi-red-fg\">IndentationError</span><span class=\"ansi-red-fg\">:</span> expected an indented block after function definition on line 2\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#146a4bdd .cell execution_count=125}\n``` {.python .cell-code}\n# Error 5\nx = 10\nif x > 5\n    print(\"Big number\")\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>  <span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[120]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-red-fg\">    </span><span class=\"ansi-red-fg\">if x &gt; 5</span>\n            ^\n<span class=\"ansi-red-fg\">SyntaxError</span><span class=\"ansi-red-fg\">:</span> expected ':'\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f98b2561 .cell execution_count=126}\n``` {.python .cell-code}\n# Error 6\nbook = {\"title\": \"1984\", \"author\": \"Orwell\"}\nprint(book[\"year\"])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">KeyError</span>                                  Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[121]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Error 6</span>\n<span class=\"ansi-green-fg\">      2</span> book = {<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">title</span><span class=\"ansi-yellow-fg\">\"</span>: <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">1984</span><span class=\"ansi-yellow-fg\">\"</span>, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">author</span><span class=\"ansi-yellow-fg\">\"</span>: <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Orwell</span><span class=\"ansi-yellow-fg\">\"</span>}\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-bg\">book</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">year</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">\"</span><span class=\"ansi-yellow-bg\">]</span>)\n\n<span class=\"ansi-red-fg\">KeyError</span>: 'year'</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#8be1e2ff .cell execution_count=127}\n``` {.python .cell-code}\n# Error 7\ntext = \"Python\"\nresult = text.find()\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[122]</span><span class=\"ansi-green-fg\">, line 3</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># Error 7</span>\n<span class=\"ansi-green-fg\">      2</span> text = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Python</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">3</span> result = <span class=\"ansi-yellow-bg\">text</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">find</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: find expected at least 1 argument, got 0</pre>\n```\n:::\n\n:::\n:::\n\n\n### Final Debugging Tips\n\n::: {.callout-tip}\n## 💡 Tips for Effective Debugging\n\n1. **Read the error message carefully** - Python tells you exactly what's wrong\n2. **Check line numbers** - But remember, the actual error might be on a previous line\n3. **Look for typos** - Variable names, function names, syntax\n4. **Verify your assumptions** - Use print() to check what values variables actually have\n5. **Search for help** - You're probably not the first person with this error\n6. **Take breaks** - Sometimes stepping away helps you see the problem fresh\n7. **Start simple** - Comment out code to isolate the problem\n8. **Don't panic** - Every programmer deals with errors constantly. It's normal!\n:::\n\n---\n\n**End of Tutorial**\n\nYou now have a comprehensive reference for Python basics, from running your first code to debugging errors. Return to this document whenever you need to refresh your knowledge!\n\n",
    "supporting": [
      "basic-python_files"
    ],
    "filters": [],
    "includes": {}
  }
}